// auto generated by concat 
;define('ckstyle/base', function(require, exports, module) {

var toString = Object.prototype.toString
var slice = [].slice

var Class = function(upper, init) {
    if (arguments.length == 1) {
        init = upper
        upper = Object
    }

    cls = function() {
        if (this.__init__) {
            var args = slice.call(arguments)
            this.__init__.apply(this, args)
        }
    }

    if (upper) {
        function F(){}
        F.prototype = upper.prototype
        cls.prototype = new F()
        cls.prototype.constructor = cls.prototype.me = cls
        cls.parent = cls.prototype.parent = upper
    }

    var obj = {}
    init.call(obj)

    function wrap(func) {
        if (toString.call(func) != '[object Function]') {
            return func
        }
        return function() {
            var args = slice.call(arguments)
            args.unshift(this)
            return func.apply(this, args)
        }
    }
    for(var prop in obj) {
        obj[prop] = wrap(obj[prop])
    }
    for(var prop in obj) {
        cls.prototype[prop] = obj[prop]
    }
    return cls
}

var Checker = new Class(function() {})

var RuleChecker = new Class(Checker, function() {})
RuleChecker.type = 'rule'

var RuleSetChecker = new Class(Checker, function() {})
RuleSetChecker.type = 'ruleset'

var StyleSheetChecker = new Class(Checker, function() {})
StyleSheetChecker.type = 'stylesheet'

var ExtraChecker = new Class(Checker, function() {})
ExtraChecker.type = 'extra'

var ERROR_LEVEL = {
    ERROR: 0,
    WARNING: 1,
    LOG: 2
}

function findInArray(array, value) {
    if (!array) {
        return false
    }
    return array.indexOf(value) != -1 || array.indexOf(value.trim()) != -1 
}

var toString = Object.prototype.toString
function isObject(obj) {
    return toString.call(obj) == '[object Object]'
}

function isFunction(obj) {
    return toString.call(obj) == '[object Function]'
}

exports.Class = Class
exports.ERROR_LEVEL = ERROR_LEVEL
exports.RuleChecker = RuleChecker
exports.RuleSetChecker = RuleSetChecker
exports.StyleSheetChecker = StyleSheetChecker
exports.ExtraChecker = ExtraChecker
exports.findInArray = findInArray
exports.isObject = isObject
exports.isFunction = isFunction

})
// auto generated by concat 
;define('ckstyle/browsers/Analyser', function(require, exports, module) {

var B = require('./BinaryRule')

var basic = {
    'ie6' : B.IE6,
    'ie7' : B.IE7,
    'ie8' : B.IE8,
    'ie9' : B.IE9PLUS,
    'ie10': B.IE9PLUS,
    'chrome' : B.CHROME,
    'firefox' : B.FIREFOX,
    'opera' : B.OPERA,
    'safari' : B.SAFARI,
    'std' : B.STD | B.NONEIE
}

var mapping = {
    'ie' : B.ALLIE,
    'ie9plus' : B.IE9PLUS,
    'std' : B.STD | B.NONEIE
}

for(var prop in basic) {
    mapping[prop] = basic[prop]
}

var keys = Object.keys(mapping);
var tmp = [];
keys.forEach(function(k) {
    if (k != 'webkit' && k != 'ie9plus') {
        tmp.push(k);
    }
})
var allBrowsers = tmp.join(',');

function analyse(text) {
    if (!text || text == '' || text=='none' || text == 'false')
        return null
    if (text == 'all')
        text = allBrowsers
    text = text.toLowerCase()
    var splited = text.split(',')
    var browsers = {}

    splited.forEach(function(s) {
        if (mapping[s]) {
            browsers[s] = mapping[s] | B.STD;
        }
    })
    return browsers
}

function whatIs(code) {
    var result = [];
    for(var prop in basic) {
        if (basic[prop] & code) {
            result.push(prop);
        }
    }
    return result.join(',')
}


exports.analyse = analyse
exports.whatIs = whatIs

// if (!module.parent) {
//     console.log(analyse('ie6,std'))
//     console.log(whatIs(B.FIREFOX))
// }

})
// auto generated by concat 
;define('ckstyle/browsers/BinaryRule', function(require, exports, module) {

/*
  0x111111111
    |||||||||
    |||||||||
    |||||||||--ie6 ---------|
    ||||||||--ie7  ---------|
    |||||||--ie8   ---------| ALLIE
    ||||||--ie9+   ---------|
    |||||
    |||||--opera
    ||||--safari   ---------|
    |||--firefox            | WEBKIT
    ||-- chrome    ---------|
    |-- STD
*/

var ORIGIN = parseInt("000000000", 2)

var STD    = parseInt("100000000", 2)
var CHROME = parseInt("010000000", 2)
var FIREFOX= parseInt("001000000", 2)
var SAFARI = parseInt("000100000", 2)
var OPERA  = parseInt("000010000", 2)

var WEBKIT = CHROME | SAFARI 

var NONEIE = CHROME | SAFARI | OPERA | FIREFOX

var IE9PLUS= parseInt("000001000", 2)
var IE8    = parseInt("000000100", 2)
var IE7    = parseInt("000000010", 2)
var IE6    = parseInt("000000001", 2)
var ALLIE  = IE9PLUS | IE8 | IE7 | IE6

var NOIE6  = IE9PLUS | IE8 | IE7 | NONEIE
var NOIE67 = IE9PLUS | IE8 | NONEIE
var NOIE678= IE9PLUS | NONEIE
var NONE   = parseInt("000000000", 2)
var ALL    = parseInt("111111111", 2)

exports.ORIGIN = ORIGIN
exports.STD = STD
exports.CHROME = CHROME
exports.FIREFOX = FIREFOX
exports.SAFARI = SAFARI
exports.OPERA = OPERA

exports.WEBKIT = WEBKIT

exports.NONEIE = NONEIE

exports.IE9PLUS = IE9PLUS
exports.IE8 = IE8
exports.IE7 = IE7
exports.IE6 = IE6
exports.ALLIE = ALLIE

exports.NOIE6 = NOIE6
exports.NOIE67 = NOIE67
exports.NOIE678 = NOIE678
exports.NONE = NONE
exports.ALL = ALL

// if (!module.parent) {
//     console.log(FIREFOX, IE6)
// }

})
// auto generated by concat 
;define('ckstyle/browsers/Detector', function(require, exports, module) {

var doRuleDetect = require('./Hacks').doRuleDetect
var doRuleSetDetect = require('./Hacks').doRuleSetDetect
var doExtraDetect = require('./Hacks').doExtraDetect

var Browser = {
    handleRule: function(rule) {
        rule.browser = doRuleDetect(rule.fixedName, rule.fixedValue)
    },
    handleRuleSet: function(ruleSet) {
        ruleSet.browser = doRuleSetDetect(ruleSet.selector)
    },
    handleNestedStatement: function(statement) {
        statement.browser = doExtraDetect(statement.selector)
    }
}

exports.Browser = Browser


// if (!module.parent) {
//     var obj = {
//         fixedName: 'a',
//         fixedValue: 'expression(321)'
//     };
//     var res = Browser.handleRule(obj)
//     console.log(obj.browser.toString(2))

//     var obj = {
//         selector: 'a[b=1]'
//     }
//     var res = Browser.handleRuleSet(obj);
//     console.log(obj.browser)

//     var obj = {
//         selector: '@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0)'
//     }
//     var res = Browser.handleNestedStatement(obj);
//     console.log(obj.browser)
// }

})
// auto generated by concat 
;define('ckstyle/browsers/Hacks', function(require, exports, module) {

var B = require('./BinaryRule')

var IE6 = B.IE6
var IE7 = B.IE7
var IE8 = B.IE8
var IE9PLUS = B.IE9PLUS
var NONE = B.NONE
var NONEIE = B.NONEIE
var NOIE678 = B.NOIE678
var NOIE6 = B.NOIE6
var NOIE67 = B.NOIE67
var ALLIE = B.ALLIE
var WEBKIT = B.WEBKIT
var FIREFOX = B.FIREFOX
var OPERA = B.OPERA
var CHROME = B.CHROME
var SAFARI = B.SAFARI
var STD = B.STD
// http://www.swordair.com/tools/css-hack-table/
// big table

var RULE_HACKS = [
    [new RegExp('^_'),                     1,  IE6],
    [new RegExp('^\\+'),                    1,  IE6 | IE7],
    [new RegExp('^\\*'),                    1,  IE6 | IE7],
    [new RegExp('.*\\9'),                  2,  ALLIE],
    [new RegExp('.*\\0/'),                 2,  IE8],
    [new RegExp('.*\\0'),                  2,  IE8 | IE9PLUS],
    [new RegExp('zoom|behavior|filter'),   1,  ALLIE],
    [new RegExp('.*(m|M)icrosoft'),        2,  ALLIE],
    [new RegExp('^expression'),            2,  ALLIE],
    [new RegExp('^\-webkit\-'),            1,  WEBKIT],
    [new RegExp('^\-webkit\-'),            2,  WEBKIT],
    [new RegExp('^\-moz\-'),               1,  FIREFOX],
    [new RegExp('^\-moz\-'),               2,  FIREFOX],
    [new RegExp('^\-ms\-'),                1,  IE9PLUS],
    [new RegExp('^\-ms\-'),                2,  IE9PLUS],
    [new RegExp('^\-khtml\-'),             1,  ALLIE],
    [new RegExp('^\-khtml\-'),             2,  ALLIE],
    [new RegExp('^\-o\-'),                 1,  OPERA],
    [new RegExp('^\-o\-'),                 2,  OPERA],

    // auto generated by script AUTO-GENERATOR-1 .
    [new RegExp('^alignment\-adjust'), 1, NONE],
    [new RegExp('^alignment\-baseline'), 1, NONE],
    [new RegExp('^animation'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-name'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-duration'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-timing\-function'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-delay'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-iteration\-count'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-direction'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^animation\-play\-state'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^appearance'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^backface\-visibility'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI],
    [new RegExp('^background\-clip'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^background\-origin'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^background\-size'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^baseline\-shift'), 1, NONE],
    [new RegExp('^bookmark\-label'), 1, NONE],
    [new RegExp('^bookmark\-level'), 1, NONE],
    [new RegExp('^bookmark\-target'), 1, NONE],
    [new RegExp('^border\-bottom\-left\-radius'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^border\-bottom\-right\-radius'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^border\-image'), 1, FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^border\-image\-outset'), 1, NONE],
    [new RegExp('^border\-image\-repeat'), 1, NONE],
    [new RegExp('^border\-image\-slice'), 1, NONE],
    [new RegExp('^border\-image\-source'), 1, NONE],
    [new RegExp('^border\-image\-width'), 1, NONE],
    [new RegExp('^border\-radius'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^border\-top\-left\-radius'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^border\-top\-right\-radius'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^box\-decoration\-break'), 1, NONE],
    [new RegExp('^box\-align'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^box\-direction'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^box\-flex'), 1, FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^box\-flex\-group'), 1, NONE],
    [new RegExp('^box\-lines'), 1, NONE],
    [new RegExp('^box\-ordinal\-group'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^box\-orient'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^box\-pack'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^box\-shadow'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^box\-sizing'), 1, IE8 | IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^color\-profile'), 1, NONE],
    [new RegExp('^column\-fill'), 1, NONE],
    [new RegExp('^column\-gap'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-rule'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-rule\-color'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-rule\-style'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-rule\-width'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-span'), 1, IE9PLUS | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-width'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^columns'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^column\-count'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^crop'), 1, NONE],
    [new RegExp('^dominant\-baseline'), 1, NONE],
    [new RegExp('^drop\-initial\-after\-adjust'), 1, NONE],
    [new RegExp('^drop\-initial\-after\-align'), 1, NONE],
    [new RegExp('^drop\-initial\-before\-adjust'), 1, NONE],
    [new RegExp('^drop\-initial\-before\-align'), 1, NONE],
    [new RegExp('^drop\-initial\-size'), 1, NONE],
    [new RegExp('^drop\-initial\-value'), 1, NONE],
    [new RegExp('^fit'), 1, NONE],
    [new RegExp('^fit\-position'), 1, NONE],
    [new RegExp('^float\-offset'), 1, NONE],
    [new RegExp('^font\-size\-adjust'), 1, FIREFOX],
    [new RegExp('^font\-stretch'), 1, NONE],
    [new RegExp('^grid\-columns'), 1, NONE],
    [new RegExp('^grid\-rows'), 1, NONE],
    [new RegExp('^hanging\-punctuation'), 1, NONE],
    [new RegExp('^hyphenate\-after'), 1, NONE],
    [new RegExp('^hyphenate\-before'), 1, NONE],
    [new RegExp('^hyphenate\-characters'), 1, NONE],
    [new RegExp('^hyphenate\-lines'), 1, NONE],
    [new RegExp('^hyphenate\-resource'), 1, NONE],
    [new RegExp('^hyphens'), 1, NONE],
    [new RegExp('^icon'), 1, NONE],
    [new RegExp('^image\-orientation'), 1, NONE],
    [new RegExp('^image\-resolution'), 1, NONE],
    [new RegExp('^inline\-box\-align'), 1, NONE],
    [new RegExp('^line\-stacking'), 1, NONE],
    [new RegExp('^line\-stacking\-ruby'), 1, NONE],
    [new RegExp('^line\-stacking\-shift'), 1, NONE],
    [new RegExp('^line\-stacking\-strategy'), 1, NONE],
    [new RegExp('^mark'), 1, NONE],
    [new RegExp('^mark\-after'), 1, NONE],
    [new RegExp('^mark\-before'), 1, NONE],
    [new RegExp('^marks'), 1, NONE],
    [new RegExp('^marquee\-direction'), 1, CHROME | SAFARI],
    [new RegExp('^marquee\-play\-count'), 1, CHROME | SAFARI],
    [new RegExp('^marquee\-speed'), 1, CHROME | SAFARI],
    [new RegExp('^marquee\-style'), 1, CHROME | SAFARI],
    [new RegExp('^move\-to'), 1, NONE],
    [new RegExp('^nav\-down'), 1, OPERA],
    [new RegExp('^nav\-index'), 1, OPERA],
    [new RegExp('^nav\-left'), 1, OPERA],
    [new RegExp('^nav\-right'), 1, OPERA],
    [new RegExp('^nav\-up'), 1, OPERA],
    [new RegExp('^opacity'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^outline\-offset'), 1, FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^overflow\-style'), 1, NONE],
    [new RegExp('^overflow\-x'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^overflow\-y'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^page'), 1, NONE],
    [new RegExp('^page\-policy'), 1, NONE],
    [new RegExp('^perspective'), 1, CHROME | SAFARI],
    [new RegExp('^perspective\-origin'), 1, CHROME | SAFARI],
    [new RegExp('^punctuation\-trim'), 1, NONE],
    [new RegExp('^rendering\-intent'), 1, NONE],
    [new RegExp('^resize'), 1, FIREFOX | CHROME | SAFARI],
    [new RegExp('^rest'), 1, NONE],
    [new RegExp('^rest\-after'), 1, NONE],
    [new RegExp('^rest\-before'), 1, NONE],
    [new RegExp('^rotation'), 1, NONE],
    [new RegExp('^rotation\-point'), 1, NONE],
    [new RegExp('^ruby\-align'), 1, IE9PLUS],
    [new RegExp('^ruby\-overhang'), 1, IE9PLUS],
    [new RegExp('^ruby\-position'), 1, IE9PLUS],
    [new RegExp('^ruby\-span'), 1, NONE],
    [new RegExp('^size'), 1, NONE],
    [new RegExp('^string\-set'), 1, NONE],
    [new RegExp('^target'), 1, NONE],
    [new RegExp('^target\-name'), 1, NONE],
    [new RegExp('^target\-new'), 1, NONE],
    [new RegExp('^target\-position'), 1, NONE],
    [new RegExp('^text\-align\-last'), 1, NONE],
    [new RegExp('^text\-emphasis'), 1, NONE],
    [new RegExp('^text\-height'), 1, NONE],
    [new RegExp('^text\-justify'), 1, ALLIE],
    [new RegExp('^text\-outline'), 1, NONE],
    [new RegExp('^text\-overflow'), 1, ALLIE | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^text\-shadow'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^text\-wrap'), 1, NONE],
    [new RegExp('^transform'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transform\-origin'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transform\-style'), 1, CHROME | SAFARI],
    [new RegExp('^transition'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transition\-property'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transition\-duration'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transition\-timing\-function'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^transition\-delay'), 1, IE9PLUS | FIREFOX | CHROME | SAFARI | OPERA],
    [new RegExp('^word\-break'), 1, ALLIE | FIREFOX | CHROME | SAFARI],
    [new RegExp('^word\-wrap'), 1, ALLIE | FIREFOX | CHROME | SAFARI | OPERA]
]

// some hacks
var RULESET_HACKS = [
    [new RegExp('\\*html'),                 1, IE6],
    [new RegExp('\\*\\+html'),               1, IE7],
    [new RegExp('\\*:first\-child\\+html'),  1, IE7],
    [new RegExp('html>body'),              1, IE7 | IE8 | IE9PLUS],
    [new RegExp('html>/\\*\\*/body'),        1, IE8 | IE9PLUS],
    [new RegExp('.*\-webkit\-'),           1, WEBKIT],
    [new RegExp('.*\-moz\-'),              1, FIREFOX],
    [new RegExp('.*\-ms\-'),               1, IE9PLUS],
    [new RegExp('.*\-o\-'),                1, OPERA],

    //auto generated by script AUTO-GENERATOR-2 .
    [new RegExp('.+:first\-line'), 1, NOIE6],
    [new RegExp('.+:first\-letter'), 1, NOIE6],
    [new RegExp('\\.[^\\s]+\\.[^\\s]+'), 2, NOIE6],
    [new RegExp('.+>.+'), 1, NOIE6],
    [new RegExp('.+:first\-child'), 1, NOIE6],
    [new RegExp('.+:focus'), 1, NOIE67],
    [new RegExp('.+\\+.+'), 1, NOIE6],
    [new RegExp('.+\\[.+\\]'), 1, NOIE6],
    [new RegExp('.+\\[.+=.+\\]'), 1, NOIE6],
    [new RegExp('.+\\[.+~=.+\\]'), 1, NOIE6],
    [new RegExp('.+:before'), 1, NOIE67],
    [new RegExp('.+:after'), 1, NOIE67],
    [new RegExp('.+~.+'), 1, NOIE6],
    [new RegExp('.+\\[.+\^=.+\\]'), 1, NOIE6],
    [new RegExp('.+\\[.+\$=.+\\]'), 1, NOIE6],
    [new RegExp('.+\\[.+\\*=.+\\]'), 1, NOIE6],
    [new RegExp('.+\\[.+\|=.+\\]'), 1, NOIE6],
    [new RegExp('.+:root'), 1, NOIE678],
    [new RegExp('.+:nth\-of\-type'), 1, NOIE678],
    [new RegExp('.+:nth\-last\-of\-type'), 1, NOIE678],
    [new RegExp('.+:first\-of\-type'), 1, NOIE678],
    [new RegExp('.+:last\-of\-type'), 1, NOIE678],
    [new RegExp('.+:only\-of\-type'), 1, NOIE678],
    [new RegExp('.+:only\-child'), 1, NOIE678],
    [new RegExp('.+:last\-child'), 1, NOIE678],
    [new RegExp('.+:nth\-child'), 1, NOIE678],
    [new RegExp('.+:nth\-last\-child'), 1, NOIE678],
    [new RegExp('.+:empty'), 1, NOIE678],
    [new RegExp('.+:target'), 1, NOIE678],
    [new RegExp('.+:checked'), 1, NOIE678],
    [new RegExp('.+::selection'), 1, NOIE678],
    [new RegExp('.+:enabled'), 1, NOIE678],
    [new RegExp('.+:disabled'), 1, NOIE678],
    [new RegExp('.+:not\(.+\)'), 1, NOIE678]
]

/*
# .test[fd*=df], .test:not(xxx) {
#      width:100px;
# }
# use .test:not(xxx) as important hack
*/
RULESET_HACKS = RULESET_HACKS.sort(function(a, b) {
    return a[2] - b[2]
});

// some hacks
var EXTRA_HACKS = [
    [new RegExp('@-webkit-keyframes'),   WEBKIT],
    [new RegExp('@-moz-keyframes'),      FIREFOX],
    [new RegExp('@-ms-keyframes'),       IE9PLUS],
    [new RegExp('@-o-keyframes'),        OPERA],
    [new RegExp('@keyframes'),             NONEIE | IE9PLUS],
    [new RegExp('@font-face'),           IE9PLUS | NONEIE],
    [new RegExp('@-moz-document'),       FIREFOX],
    [new RegExp('@mediascreenand\\(-webkit-min-device-pixel-ratio:0\\)'),  WEBKIT],
    [new RegExp('@mediascreenand\\(max-device-width:480px\\)'),               WEBKIT],
    [new RegExp('@mediaalland\\(-webkit-min-device-pixel-ratio:10000\\),notalland\\(-webkit-min-device-pixel-ratio:0\\)'),  OPERA]
]

function doRuleDetect(name, value) {
    name = '' + name;
    value = '' + value;
    var name = name.trim().replace(/\s+/g, '')
    var value = value.trim().replace(/\s+/g, '')

    for(var i = 0; i < RULE_HACKS.length; i++) {
        var hack = RULE_HACKS[i];
        var pattern = hack[0]
        var match = pattern.test(hack[1] == 1 ? name : value)
        if (match) {
            return hack[2]
        }
    }
        
    return STD
}

function doRuleSetDetect(selector) {
    var originSelector = selector.trim();
    selector = originSelector.replace(/\s+/g, '')
    for(var i = 0; i < RULESET_HACKS.length; i++) {
        var hack = RULESET_HACKS[i];
        var pattern = hack[0]
        var match = pattern.test(hack[1] == 1 ? selector : originSelector)
        if (match) {
            return hack[2]
        }
    }
    return STD
}

function doExtraDetect(selector) {
    selector = selector.trim().replace(/\s+/g, '')
    for(var i = 0; i < EXTRA_HACKS.length; i++) {
        var hack = EXTRA_HACKS[i];
        var pattern = hack[0]
        var match = pattern.test(selector)
        if (match)
            return hack[1]
    }
    return STD
}

exports.doRuleDetect = doRuleDetect
exports.doRuleSetDetect = doRuleSetDetect
exports.doExtraDetect = doExtraDetect

// if (!module.parent) {
    // console.log(doRuleDetect('_width', 100))
    // console.log((doRuleSetDetect('.a, .b')).toString(2))
    // console.log((doExtraDetect('@media screen and (-webkit-min-device-pixel-ratio:0)')).toString(2))
    // console.log((doExtraDetect('@media all and (-webkit-min-device-pixel-ratio:10000), not all and (-webkit-min-device-pixel-ratio:0)')).toString(2))
// }

})
// auto generated by concat 
;define('ckstyle/browsers/index', function(require, exports, module) {

exports.BinaryRule = require('./BinaryRule')
exports.Detector = require('./Detector')
exports.Hacks = require('./Hacks')
exports.Analyser = require('./Analyser')

})
// auto generated by concat 
;define('ckstyle/ckstyler', function(require, exports, module) {

var fs = require('fs');
var CSSParser = require('./parser/index').CSSParser;
var logger = require('./logger/index')
var base = require('./base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var ALL = require('./browsers/index').BinaryRule.ALL;
var isFunction = base.isFunction
var isObject = base.isObject
var findInArray = base.findInArray

var args = require('./command/args');
var defaultConfig = new args.CommandArgs()

function extend(target, src) {
    for(var prop in src) {
        if (prop in target) {
            continue
        }
        target[prop] = src[prop]
    }
}

var CssChecker = new Class(function() {
    this.__init__ = function(self, parser, config) {
        if (typeof parser == 'string') {
            parser = new CSSParser(parser, config && config.fileName ? config.fileName : 'TMP');
        }
        self.parser = parser
        self.config = config || defaultConfig

        if (self.config != defaultConfig) {
            extend(self.config, defaultConfig)
        }

        // 错误记录，log是2级，warn是1级，error是0级
        self.logMsgs = []
        self.warningMsgs = []
        self.errorMsgs = []

        // 额外的错误记录，比如工具内部的一些错误等
        self.extraMsgs = []

        // 注册的不同类型的检查器（都来自plugins目录）
        self.ruleSetCheckers = []
        self.ruleCheckers = []
        self.styleSheetCheckers = []

        self.extraCheckers = []

        // 如果有解析过程的错误，则先把那些错误记录下来
        self.handleParseErrors()
    };

    this.prepare = function(self, pluginDir, config) {
        this.loadPlugins(pluginDir);
        this.doParse(config);
    }

    this.resetStyleSheet = function(self) {
        self.parser.styleSheet.rebase()
    }

    this.doParse = function(self) {
        this.parser.doParse(this.config);
    }

    this.getStyleSheet = function(self) {
        // 获取styleSheet引用
        return self.parser.styleSheet
    }

    this.handleParseErrors = function(self) {
        self.parser.getParseErrors().forEach(function(msg) {
            self.remember(msg[0], msg[1])
        })
    }

    this.hasError = function(self) {
        // 判断是否有error
        return self.logMsgs.length != 0 || self.warningMsgs.length != 0 || self.errorMsgs.length != 0
    }

    this.getErrors = this.errors = function(self) {
        // 把错误信息导出
        return [self.logMsgs, self.warningMsgs, self.errorMsgs]
    }

    this.loadPlugins = function(self, pluginDir) {
        if (typeof define == "function" && (define.amd || define.cmd)) {
            var plugins = require('./plugins/index');
            for(var prop in plugins) {
                self.registerPluginClass(plugins[prop])
            }
            return;
        }
        pluginDir = pluginDir || (fs.realpathSync(__dirname) + '/plugins');
        self._doLoadPlugins(pluginDir)
    }

    this._doLoadPlugins = function(self, pluginDir) {
        
        // 从plugins目录动态载入检查类
        fs.readdirSync(pluginDir).forEach(function(filename) {
            if (filename.slice(-3) != '.js' || filename.slice(-1) == '_') {
                return
            }
            if (filename == 'index.js' || filename == 'helper.js') {
                return
            }
            var fullpath = './plugins/' + filename, plugin;
            try {
                plugin = require(fullpath)
            } catch (e) {
                logger.error(e);
                plugin = null;
            }
            if (plugin) {
                self.registerPluginClass(plugin)
            }
        })
    }

    this.registerPluginClass = function(self, pluginClass) {
        var include = self.config.include || 'all'
        var exclude = self.config.exclude || []
        var safe = self.config.safe
        var instance = null;

        if (isFunction(pluginClass)) {
            instance = new pluginClass();
        } else if (isObject(pluginClass)) {
            // 构造plugin的类
            instance = pluginClass
        }
        
        // 如果是always，则说明不论是否选择都需要的规则
        if (!instance.always) {
            if (include != 'all' && include.indexOf(instance.id) == -1) {
                return
            } else if (exclude != 'none' && exclude.indexOf(instance.id) != -1) {
                return
            } else if (safe && instance.notSafe) {
                return
            }
        }
        self.registerChecker(instance)
    }

    this.registerChecker = function(self, checker) {
        // 根据检查器类型的不同，分别注册到不同的检查器列表中
        if (checker.parent && checker.parent.type == 'rule' || checker.type == 'rule') {
            self.registerRuleChecker(checker)
        } else if (checker.parent && checker.parent.type == 'ruleset' || checker.type == 'ruleset') {
            self.registerRuleSetChecker(checker)
        } else if (checker.parent && checker.parent.type == 'stylesheet' || checker.type == 'stylesheet') {
            self.registerStyleSheetChecker(checker)
        } else {
            self.registerExtraChecker(checker)
        }
    }

    this.registerStyleSheetChecker = function(self, checker) {
        self.styleSheetCheckers.push(checker)
    }

    this.registerRuleSetChecker = function(self, checker) {
        self.ruleSetCheckers.push(checker)
    }

    this.registerRuleChecker = function(self, checker) {
        self.ruleCheckers.push(checker)
    }

    this.registerExtraChecker = function(self, checker) {
        self.extraCheckers.push(checker)
    }

    this.remember = function(self, errorLevel, errorMsg) {
        // 记录代码中的问题
        if (errorLevel == ERROR_LEVEL.LOG) {
            if (!self.config.errorLevel || self.config.errorLevel > 1) {
                self.logMsgs.push(errorMsg)
            }
        } else if (errorLevel == ERROR_LEVEL.WARNING) {
            if (!self.config.errorLevel || self.config.errorLevel > 0) {
                self.warningMsgs.push(errorMsg)
            }
        } else if (errorLevel == ERROR_LEVEL.ERROR) {
            self.errorMsgs.push(errorMsg)
        } else {
            logger.error('[DEV] wrong ErrorLevel for ' + errorMsg)
        }
    }

    this.logStyleSheetMessage = function(self, checker, styleSheet, errors) {
        // 记录StyleSheet的问题
        errorLevel = checker.level || checker.errorLevel;
        if (errors == null) {
            errors = [checker.msg || checker.errorMsg]
        }
        errors.forEach(function(errorMsg) {
            obj = {}
            if (!errorMsg)
                logger.error('[DEV] no errorMsg in your plugin, please check it')

            if (errorMsg.indexOf('${file}') == -1) {
                errorMsg = errorMsg + ' (from "' + styleSheet.getFile() + '")'
            // } else {
            //    errorMsg = errorMsg.replace('${file}', styleSheet.getFile())
            }

            obj["errorMsg"] = errorMsg
            obj["file"] = styleSheet.getFile()
            obj["level"] = 'stylesheet'
            self.remember(errorLevel, obj);
        })
    }

    this.logRuleMessage = function(self, checker, rule, errors) {
        // 记录一条key/value的问题
        errorLevel = checker.level || checker.errorLevel;
        if (!errors)
            errors = [checker.msg || checker.errorMsg]
        errors.forEach(function(errorMsg) {
            obj = {}
            if (!errorMsg) {
                logger.error('[DEV] no errorMsg in your plugin, please check it')
                return;
            }
            if (errorMsg.indexOf('${selector}') == -1) {
                errorMsg = errorMsg + ' (from "' + rule.selector + '")'
            //} else {
            //    errorMsg = errorMsg.replace('${selector}', rule.selector)
            }
            //errorMsg = errorMsg.replace('${name}', rule.roughName.trim())
            //errorMsg = errorMsg.replace('${value}', rule.value.trim())
            obj["errorMsg"] = errorMsg
            obj["selector"] = rule.selector
            obj["name"] = rule.roughName.trim()
            obj["value"] = rule.value.trim()
            obj["level"] = 'rule'
            self.remember(errorLevel, obj);
        });
    }

    this.logRuleSetMessage = function(self, checker, ruleSet, errors) {
        // 记录一个"规则集"中的问题
        errorLevel = checker.level || checker.errorLevel;
        if (!errors) {
            errors = [checker.msg || checker.errorMsg]
        }
        errors.forEach(function(errorMsg) {
            obj = {}
            if (errorMsg.indexOf('${selector}') == -1) {
                errorMsg = errorMsg + ' (from "' + ruleSet.selector + '")'
            //} else {
            //    errorMsg = errorMsg.replace('${selector}', ruleSet.selector)
            }
            obj["errorMsg"] = errorMsg
            obj["selector"] = ruleSet.selector
            obj["level"] = 'ruleset'
            self.remember(errorLevel, obj);
        });
    }

    this.doCompress = function(self, browser) {
        browser = browser || ALL;
        self.config._inner.curBrowser = browser
        self.doFix(browser)
        return self.getStyleSheet().compress(browser).trim()
    }

    this.doFormat = function(self) {
        self.resetStyleSheet()
        return self.getStyleSheet().fixed()
    }

    this.doFix = function(self, browser) {
        self.config.operation = 'fix'
        browser = browser || ALL;
        self.resetStyleSheet()
        // 忽略的规则集（目前只忽略单元测试的selector）
        var ignoreRulesets = self.config.ignoreRulesets

        // fix规则集
        function fixRuleSet(ruleSet) {
            self.ruleSetCheckers.forEach(function(checker) {
                if (!checker.fix) {
                    return;
                }
                if (ruleSet.fixedSelector == '') {
                    ruleSet.fixedSelector = ruleSet.selector
                    ruleSet.fixedComment = ruleSet.comment
                }
                checker.fix(ruleSet, self.config)
            });
        }

        // fix规则
        function fixRules(ruleSet) {
            self.ruleCheckers.forEach(function(checker) {
                ruleSet.getRules().forEach(function(rule) {
                    if (!checker.fix) {
                        return;
                    }

                    // 确保fixedName/fixedValue一定有值
                    // fix中一定要针对fixedName/fixedValue来判断，确保其他plugin的fix不会被覆盖
                    if (rule.fixedValue == '') {
                        rule.fixedValue = rule.value
                        rule.fixedName = rule.strippedName
                    }
                    // print checker.id, checker, rule.fixedValue
                    checker.fix(rule, self.config)
                });
            });
        }

        function fixExtraRules(ruleSet) {
            self.extraCheckers.forEach(function(checker) {
                if (!checker.fix) {
                    return;
                }
                if (ruleSet.fixedSelector == '') {
                    ruleSet.fixedSelector = ruleSet.selector
                    ruleSet.fixedStatement = ruleSet.statement
                }
                checker.fix(ruleSet, self.config)
            });
        }

        var styleSheet = self.parser.styleSheet

        styleSheet.getRuleSets().forEach(function(ruleSet) {
            if (ruleSet.extra) {
                fixExtraRules(ruleSet)
                return
            }
            // 判断此规则是否忽略
            if (findInArray(ignoreRulesets, ruleSet.selector)) {
                return
            }
            // 先fix rule
            fixRules(ruleSet)

            // 再fix ruleSet
            fixRuleSet(ruleSet)
        });

        // 最后fix styleSheet
        self.styleSheetCheckers.forEach(function(checker) {
            if (checker.fix) {
                checker.fix(styleSheet, self.config)
            }
        });
        return self.getStyleSheet().fixed(self.config)
    }

    this.doCheck = function(self) {
        // 忽略的规则集（目前只忽略单元测试的selector）
        var ignoreRulesets = self.config.ignoreRulesets

        function isBoolean(value) {
            return value === true || value === false;
        }

        function isList(value) {
            return Array.isArray(value)
        }

        // 检查规则集
        function checkRuleSet(ruleSet) {
            self.ruleSetCheckers.forEach(function(checker) {
                if (!checker.check) {
                    return;
                }
                result = checker.check(ruleSet, self.config)
                if (isBoolean(result)) {
                    if (!result) {
                        self.logRuleSetMessage(checker, ruleSet)
                    }
                } else if (isList(result) && len(result) != 0) {
                    self.logRuleSetMessage(checker, ruleSet, result)
                } else {
                    logger.error('check should be boolean/list, ' + checker.id + ' is not.')
                }
            });
        }

        // 检查规则
        function checkRule(ruleSet) {
            self.ruleCheckers.forEach(function(checker) {
                ruleSet.getRules().forEach(function(rule) {
                    if (!checker.check) {
                        return;
                    }
                    result = checker.check(rule, self.config)
                    if (isBoolean(result)) {
                        if (!result) {
                            self.logRuleMessage(checker, rule)
                        }
                    } else if (isList(result) && len(result) != 0) {
                        self.logRuleMessage(checker, rule, result)
                    } else {
                        logger.error('check should be boolean/list, ' + checker.id + ' is not.')
                    }
                });
            });
        }

        // 检查规则
        function checkExtraRule(ruleSet) {
            self.extraCheckers.forEach(function(checker) {
                if (!checker.check) {
                    return;
                }
                result = checker.check(ruleSet, self.config)
                if (isBoolean(result)) {
                    if (!result) {
                        self.logRuleSetMessage(checker, ruleSet)
                    }
                } else if (isList(result) && len(result) != 0) {
                    self.logRuleSetMessage(checker, ruleSet, result)
                } else {
                    logger.error('check should be boolean/list, ' + checker.id + ' is not.')
                }
            });
        }

        // 检查样式表
        styleSheet = self.parser.styleSheet
        self.styleSheetCheckers.forEach(function(checker) {
            if (!checker.check) {
                return;
            }
            result = checker.check(styleSheet, self.config)
            if (isBoolean(result)) {
                if (!result) {
                    self.logStyleSheetMessage(checker, styleSheet)
                }
            } else if (isList(result) && result.length != 0) {
                self.logStyleSheetMessage(checker, styleSheet, result)
            } else {
                logger.error('check should be boolean/list, ' + checker.id + ' is not.')
            }
        });
        styleSheet.getRuleSets().forEach(function(ruleSet) {
            if (ruleSet.extra) {
                checkExtraRule(ruleSet)
                return;
            }
            // 判断此规则是否忽略
            if (findInArray(ignoreRulesets, ruleSet.selector)) {
                return;
            }
            checkRuleSet(ruleSet)
            checkRule(ruleSet)
        })
    }
});

exports.CssChecker = CssChecker;

})
// auto generated by concat 
;define('ckstyle/command/args', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class

var analyse = require('../browsers/Analyser').analyse

var EXTS = {
    check: '.ckstyle.txt',
    fix: '.fixed.css',
    format: '.fmt.css',
    compress: '.min.css'
}

var CommandArgs = new Class(function() {

    this.__init__ = function(self, operation) {

        self.operation = operation || 'check'

        self.errorLevel = 2
        self.recursive = false
        self.print = false
        self.include = 'all'
        self.exclude = 'none'
        self.config = ''

        self.extension = EXTS[self.operation] || '.ckstyle.txt'

        self.standard = ''
        self.json = false
        self.ignoreRulesets = ['@unit-test-expecteds']
        self.singleLine = false
        self.safe = false

        self.combine = true
        self.browsers = null
        self.noBak = false

        // for CKStyle inner use
        self._inner = {
            curBrowser: null
        }

        // plugin config for developers, add plugin section in ckstyle.ini
        // 
        // [plugin]
        // pluginA = 1
        self._pluginConfigs = {}
    }

    this.extend = function(self, config) {
        // load configs i need.
        for(var prop in self) {
            if (prop == 'parent') {
                continue
            }
            if (config.hasOwnProperty(prop)) {
                if (prop == 'browsers') {
                    self[prop] = analyse(config[prop])
                    continue
                }
                self[prop] = config[prop]
            }
        }
    }

    this.toString = function(self) {
        var collector = []
        for(var prop in self) {
            collector.push(prop + ': ' + self[prop])
        }
        return collector.join(', ')
    }
});

exports.CommandArgs = CommandArgs

})
// auto generated by concat 
;define('ckstyle/command/index', function(require, exports, module) {



})
// auto generated by concat 
;define('ckstyle/doCssCheck', function(require, exports, module) {

var fs = require('fs');
var pathm = require('path');
var logger = require('./logger/index')
var CssParser = require('./parser/index').CSSParser
var CssChecker = require('./ckstyler').CssChecker
var args = require('./command/args');
var ReporterUtil = require('./reporter/index').ReporterUtil

var defaultConfig = new args.CommandArgs()

function endswith(filename, extname) {
    return filename.slice(extname.length * -1) == extname;
}

function doCheck(fileContent, fileName, config) {
    fileName = fileName || ''
    config = config || defaultConfig

    config.operation = 'check'
    var parser = new CssParser(fileContent, fileName)
    //parser.doParse(config)

    var checker = new CssChecker(parser, config)
    checker.prepare();
    //checker.loadPlugins(os.path.realpath(os.path.join(__file__, '../plugins')))
    checker.doCheck()

    return checker
}

function checkFile(filePath, config) {
    config = config || defaultConfig
    if (!filePath || !fs.existsSync(filePath)) {
        logger.error('[check] file not exist: ' + filePath)
        return;
    }
    var fileContent = fs.readFileSync(filePath, {encoding: 'utf-8'})
    logger.log('[check] checking ' + filePath)
    var checker = doCheck(fileContent, filePath, config)
    var path = filePath + config.extension
    if (checker.hasError()) {
        var reporter = ReporterUtil.getReporter(config.json ? 'json' : 'text', checker)
        reporter.doReport()
        if (config.print) {
            if (fs.existsSync(path)) {
                fs.unlinkSync(path)
            }
            logger.out(reporter.export() + '\n')
        } else {
            fs.writeFileSync(path, reporter.export())
            logger.log('[check] @see ' + path)
        }
        return false
    } else {
        if (config.json)
            logger.ok('{"status":"ok","result":"' + filePath + ' is ok"}')
        else
            logger.ok('[check] ' + filePath + ' is ok\n')
        if (fs.existsSync(path)) {
            fs.unlinkSync(path)
        }
        return true
    }
} 



function check(file, config) {
    if (!file || !fs.existsSync(file)) {
        logger.error('[check] file not exist: ' + file)
        return;
    }
    if (fs.statSync(file).isDirectory()){
        if (config.recursive) {
            checkDirRecursively(file, config)
        } else {
            checkDirSubFiles(file, config)
        }
    } else {
        checkFile(file, config)
    }
}


function checkDir(directory, config) {
    config = config || defaultConfig
    if (config.recursive)
        checkDirRecursively(directory, config)
    else
        checkDirSubFiles(directory, config)
}

function checkDirSubFiles(directory, config) {
    config = config || defaultConfig
    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        checkFile(pathm.join(directory, filename), config)
    });
}

function checkDirRecursively(directory, config) {
    config = config || defaultConfig

    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        if (fs.statSync(filename).isDirectory()){
            checkDirRecursively(pathm.join(directory, fileName), config)
            return
        }
        checkFile(pathm.join(directory, filename), config)
    });
}

function checkCssText(text) {
    var checker = doCheck(text)
    var reporter = ReporterUtil.getReporter('text', checker)
    reporter.doReport()
    logger.log(reporter.export())
}

exports.doCheck = doCheck;
exports.check = check;

})
// auto generated by concat 
;define('ckstyle/doCssCompress', function(require, exports, module) {

var fs = require('fs');
var pathm = require('path');

var logger = require('./logger/index')
var CssParser = require('./parser/index').CSSParser
var CssChecker = require('./ckstyler').CssChecker
var args = require('./command/args');

var defaultConfig = new args.CommandArgs()

function endswith(filename, extname) {
    return filename.slice(extname.length * -1) == extname;
}

function prepare(fileContent, fileName, config) {
    fileName = fileName || ''
    config = config || defaultConfig
    config.operation = 'compress'

    var parser = new CssParser(fileContent, fileName)
    //parser.doParse(config)

    var checker = new CssChecker(parser, config)
    checker.prepare();
    return checker
}

function doCompress(fileContent, fileName, config) {
    checker = prepare(fileContent, fileName, config)
    message = checker.doCompress()
    return [checker, message]
}

function forJsCompress(fileContent, config) {
    return doCompress(fileContent, '', config)[1]
}

function compressFile(filePath, config) {
    config = config || defaultConfig
    if (!filePath || !fs.existsSync(filePath)) {
        logger.error('[compress] file not exist: ' + filePath)
        return;
    }

    var extension = config.extension
    if (extension.toLowerCase() == 'none')
        extension = null
    if (extension && endswith(filePath, extension))
        return
    var fileContent = fs.readFileSync(filePath, {encoding: 'utf-8'})
    if (!config.print)
        logger.ok('[compress] compressing ' + filePath)
    var path = filePath
    var basic = filePath.split('.css')[0]
    if (!extension) {
        if (config.noBak === false)
            fs.writeFileSync(path + '.bak', fileContent)
    } else {
        path = filePath.split('.css')[0] + extension
    }

    if (!config.browsers) {
        var result = doCompress(fileContent, filePath, config)
        checker = result[0]
        message = result[1]
        if (config.print) {
            if (extension && fs.existsSync(path)) {
                fs.unlinkSync(path)
            }
            logger.out(message)
        } else {
            fs.writeFileSync(path, message)
            logger.ok('[compress] compressed ==> ' + path)
        }
    } else {
        items = config.browsers
        onlyOne = Object.keys(items).length == 1
        for (var key in items) {
            var value = items[key];
            // 每次都需要一个新的，避免上一次操作后的对象在内存中重复使用导致错误
            // 尤其是合并过的CSS规则集
            checker = prepare(fileContent, filePath, config)
            message = checker.doCompress(value)
            path = filePath.split('.css')[0] + '.' + key + '.min.css'
            if (config.print) {
                if (extension && fs.existsSync(path)) {
                    fs.unlinkSync(path)
                }
                logger.out((onlyOne ? '' : (key + ' : ')) + message)
            } else {
                fs.writeFileSync(path, message)
                logger.ok('[compress] compressed ==> ' + path)
            }
        }
    }
}

function compress(file, config) {
    if (!file || !fs.existsSync(file)) {
        logger.error('[compress] file not exist: ' + file)
        return;
    }
    if (fs.statSync(file).isDirectory()){
        if (config.recursive) {
            compressDirRecursively(file, config)
        } else {
            compressDirSubFiles(file, config)
        }
    } else {
        compressFile(file, config)
    }
}

function compressDir(directory, config) {
    config = config || defaultConfig
    if (config.recursive)
        compressDirRecursively(directory, config)
    else
        compressDirSubFiles(directory, config)
}

function compressDirSubFiles(directory, config) {
    config = config || defaultConfig
    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        compressFile(pathm.join(directory, filename), config)
    });
}

function compressDirRecursively(directory, config) {
    config = config || defaultConfig

    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        if (fs.statSync(filename).isDirectory()){
            compressDirRecursively(pathm.join(directory, fileName), config)
            return
        }
        compressFile(pathm.join(directory, filename), config)
    });
}

exports.prepare = prepare

exports.doCompress = doCompress;
exports.compress = compress;
exports.compressStr = forJsCompress;

})
// auto generated by concat 
;define('ckstyle/doCssFix', function(require, exports, module) {

var fs = require('fs');
var pathm = require('path');

var logger = require('./logger/index')
var CssParser = require('./parser/index').CSSParser
var CssChecker = require('./ckstyler').CssChecker
var args = require('./command/args');

var defaultConfig = new args.CommandArgs()

function endswith(filename, extname) {
    return filename.slice(extname.length * -1) == extname;
}

function doFix(fileContent, fileName, config) {
    fileName = fileName || ''
    config = config || defaultConfig

    config.operation = 'fix'
    var parser = new CssParser(fileContent, fileName)
    //parser.doParse(config)

    var checker = new CssChecker(parser, config)
    checker.prepare();
    //checker.loadPlugins(os.path.realpath(os.path.join(__file__, '../plugins')))
    var fixed = checker.doFix()

    return [checker, fixed]
}

function forJsFix(fileContent, config) {
    return doFix(fileContent, '', config)[1]
}

function fixFile(filePath, config) {
    if (!filePath || !fs.existsSync(filePath)) {
        logger.error('[fix] file not exist: ' + filePath)
        return;
    }

    config = config || defaultConfig

    extension = config.extension

    if (extension.toLowerCase() == 'none')
        extension = null
    if (extension != null && endswith(filePath, extension))
        return
    fileContent = fs.readFileSync(filePath, {encoding: 'utf-8'})
    if (!config.print)
        logger.ok('[fix] fixing ' + filePath)

    var result = doFix(fileContent, filePath, config)
    checker = result[0]
    msg = result[1]

    path = filePath
    if (extension == null) {
        if (!config.noBak)
            fs.writeFileSync(path + '.bak', fileContent)
    } else {
        path = filePath.split('.css')[0] + extension
    }
    if (config.print) {
        if (extension && fs.existsSync(path)) {
            fs.unlinkSync(path)
        }
        logger.out(msg)
    } else {
        fs.writeFileSync(path, msg)
        logger.ok('[fix] fixed ==> ' + path)
    }
} 

function fix(file, config) {
    if (!file || !fs.existsSync(file)) {
        logger.error('[fix] file not exist: ' + file)
        return;
    }
    if (fs.statSync(file).isDirectory()){
        if (config.recursive) {
            fixDirRecursively(file, config)
        } else {
            fixDirSubFiles(file, config)
        }
    } else {
        fixFile(file, config)
    }
}

function fixDir(directory, config) {
    config = config || defaultConfig
    if (config.recursive)
        fixDirRecursively(directory, config)
    else
        fixDirSubFiles(directory, config)
}

function fixDirSubFiles(directory, config) {
    config = config || defaultConfig
    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        fixFile(pathm.join(directory, filename), config)
    });
}

function fixDirRecursively(directory, config) {
    config = config || defaultConfig

    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        if (fs.statSync(filename).isDirectory()){
            fixDirRecursively(pathm.join(directory, fileName), config)
            return
        }
        fixFile(pathm.join(directory, filename), config)
    });
}

exports.doFix = doFix
exports.fix = fix
exports.fixStr = forJsFix

})
// auto generated by concat 
;define('ckstyle/doCssFormat', function(require, exports, module) {

var fs = require('fs');
var pathm = require('path');

var logger = require('./logger/index')
var CssParser = require('./parser/index').CSSParser
var CssChecker = require('./ckstyler').CssChecker
var args = require('./command/args');

var defaultConfig = new args.CommandArgs()

function endswith(filename, extname) {
    return filename.slice(extname.length * -1) == extname;
}

function doFormat(fileContent, fileName, config) {
    fileName = fileName || ''
    config = config || defaultConfig

    config.operation = 'fix'
    var parser = new CssParser(fileContent, fileName)
    //parser.doParse(config)

    var checker = new CssChecker(parser, config)
    checker.prepare();
    //checker.loadPlugins(os.path.realpath(os.path.join(__file__, '../plugins')))
    var formatted = checker.doFormat()

    return [checker, formatted]
}

function forJsFormat(fileContent, config) {
    return doFormat(fileContent, '', config)[1]
}

function formatFile(filePath, config) {
    if (!filePath || !fs.existsSync(filePath)) {
        logger.error('[format] file not exist: ' + filePath)
        return;
    }

    config = config || defaultConfig

    extension = config.extension

    if (extension.toLowerCase() == 'none')
        extension = null
    if (extension != null && endswith(filePath, extension))
        return
    fileContent = fs.readFileSync(filePath, {encoding: 'utf-8'})
    if (!config.print)
        logger.ok('[format] formatting ' + filePath)

    var result = doFormat(fileContent, filePath, config)
    checker = result[0]
    msg = result[1]

    path = filePath
    if (extension == null) {
        if (!config.noBak)
            fs.writeFileSync(path + '.bak', fileContent)
    } else {
        path = filePath.split('.css')[0] + extension
    }
    if (config.print) {
        if (extension && fs.existsSync(path)) {
            fs.unlinkSync(path)
        }
        logger.out(msg)
    } else {
        fs.writeFileSync(path, msg)
        logger.ok('[format] formatted ==> ' + path)
    }
} 

function format(file, config) {
    if (!file || !fs.existsSync(file)) {
        logger.error('[format] file not exist: ' + file)
        return;
    }
    if (fs.statSync(file).isDirectory()){
        if (config.recursive) {
            formatDirRecursively(file, config)
        } else {
            formatDirSubFiles(file, config)
        }
    } else {
        formatFile(file, config)
    }
}

function formatDir(directory, config) {
    config = config || defaultConfig
    if (config.recursive)
        formatDirRecursively(directory, config)
    else
        formatDirSubFiles(directory, config)
}

function formatDirSubFiles(directory, config) {
    config = config || defaultConfig
    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        formatFile(pathm.join(directory, filename), config)
    });
}

function formatDirRecursively(directory, config) {
    config = config || defaultConfig

    fs.readdirSync(dirname).forEach(function(filename) {
        if ((!endswith(filename, '.css')) || filename.indexOf('_') == 0)
            return
        if (fs.statSync(filename).isDirectory()){
            formatDirRecursively(pathm.join(directory, fileName), config)
            return
        }
        formatFile(pathm.join(directory, filename), config)
    });
}

exports.doFormat = doFormat
exports.format = format
exports.formatStr = forJsFormat

})
// auto generated by concat 
;define('ckstyle/entity/entityutil', function(require, exports, module) {

var ALL = require('../browsers/BinaryRule').ALL

var Cleaner = {};

Cleaner.clean = function(msg) {
    msg = msg.trim().replace('\r', '').replace('\n', '').replace('    ', ' ')
    msg = msg.replace(/\s*\{\s*/g, '{'); 
    msg = msg.replace(/\s*:\s*/g, ':'); 
    msg = msg.replace(/\s*;\s*\}\s*/g, '}');
    msg = msg.replace(/\s*;\s*/g, ';')
    msg = msg.replace(/\s\s+/g, ' ')
    msg = msg.replace(/\(\s*/g, '(')
    msg = msg.replace(/\s+\)/g, ')')
    msg = msg.replace(/\s+,/g, ',')
    msg = msg.replace(/,\s+/g, ',')
    msg = msg.replace(/(\.[0-9]*[1-9])0*([a-zA-Z]*)/g, function(a, b, c) {
        return b + c;
    })
    msg = msg.trim()
    return msg
}

Cleaner.clearName = function(name) {
    name = name.trim()
    // #padding: 10px???
    if (name.indexOf('_') == 0 || name.indexOf('*') == 0 || name.indexOf('+') == 0 || name.indexOf('#') == 0) {
        name = name.substring(1);
    }
    if (name.indexOf('-') == 0) {
        if (name.indexOf('-moz-') == 0
            || name.indexOf('-webkit-') == 0 
            || name.indexOf('-ms-') == 0 
            || name.indexOf('-o-') == 0
            || name.indexOf('-khtml-') == 0)
            name = name.split('-').slice(2).join('-');
    }
    return name.toLowerCase()
}

Cleaner.clearValue = function(value) {
    value = value.trim()
    if (value.slice(-1) == ';')
        value = value.slice(0, -1);
    return value
}

Cleaner.clearValues = function(values) {
    values = values.trim()
    return values
}

Cleaner.clearSelector = function(selector) {
    return selector.split('\n').join(' ').trim()
}

Cleaner.clearComment = function(comment) {
    comment = comment.trim()
    if (comment.length != 0 && comment.indexOf('\n') == -1) {
        comment = comment.replace(/\/\*/g, '').replace(/\*\//g, '').trim()
        comment = '/* ' + comment + ' */'
    }
    return comment
}

exports.Cleaner = Cleaner;

})
// auto generated by concat 
;define('ckstyle/entity/extrastatement', function(require, exports, module) {

var helper = require('./entityutil');
Cleaner = helper.Cleaner;
var doExtraDetect = require('../browsers/Hacks').doExtraDetect
var ALL = require('../browsers/BinaryRule').ALL

function ExtraStatement(operator, statement, comment, styleSheet) {
    var self = this;
    self.extra = true
    self.nested = false
    self.selector = self.operator = operator.trim()
    self.comment = comment || ''
    self.statement = statement || ''
    self.styleSheet = styleSheet

    self.fixedSelector = ''
    self.fixedStatement = ''

    self.browser = doExtraDetect(self.selector)
    self.toBeUsed = {}
}

ExtraStatement.prototype.isImport = function() {
    var self = this;
    return self.operator == '@import'
}

ExtraStatement.prototype.rebase = function() {
    var self = this;
    self.fixedSelector = ''
    self.fixedStatement = ''
}
    
ExtraStatement.prototype.isOpmOperator = function() {
    var self = this;
    return self.operator.indexOf('@-css-compiler') != -1
}

ExtraStatement.prototype.compress = function(browser) {
    // do not export @-css-compiler to online 
    browser = browser || ALL;
    var self = this;
    if (self.isOpmOperator())
        return ''

    if (!(self.browser & browser))
        return ''
    
    msg = Cleaner.clean(self.statement)
    if (msg.slice(-1) != '}' && msg.slice(-1) != ';') {
        msg = msg + ';'
    }
    return msg
}

ExtraStatement.prototype.fixed = function(config) {
    var self = this;
    if (self.comment.length == 0) {
        return self.statement.trim()
    } else {
        return self.comment + '\n' + self.statement.trim()
    }
}

ExtraStatement.prototype.toString = function() {
    var self = this;
    return self.statement
}

module.exports = ExtraStatement;

})
// auto generated by concat 
;define('ckstyle/entity/index', function(require, exports, module) {

var StyleSheet = require('./stylesheet');

exports.StyleSheet = StyleSheet;

})
// auto generated by concat 
;define('ckstyle/entity/nestedstatement', function(require, exports, module) {

var helper = require('./entityutil');
Cleaner = helper.Cleaner;
var doExtraDetect = require('../browsers/Hacks').doExtraDetect
var ALL = require('../browsers/BinaryRule').ALL

function NestedStatement(selector, statement, comments, styleSheet) {
    var self = this;
    self.extra = true
    self.nested = true
    self.selector = Cleaner.clearSelector(selector)
    self.statement = statement.trim()
    self.roughStatement = statement
    self.roughSelector = selector
    self.comments = comments.trim()
    self.styleSheet = styleSheet

    self.fixedSelector = ''
    self.fixedStatement = ''

    self.compressedStatement = ''

    self.browser = doExtraDetect(self.selector)
    self.toBeUsed = {}

    self.innerStyleSheet = null
}

NestedStatement.prototype.rebase = function() {
    var self = this;
    self.fixedSelector = ''
    self.fixedStatement = ''
}

NestedStatement.prototype.compress = function(browser) {
    browser = browser || ALL;
    var self = this;
    if (!(self.browser & browser))
        return ''
    var value = self._compressedStatement(browser);
    if (value == '{}') {
        return ''
    }
    return self.fixedSelector + value
}

NestedStatement.prototype.fixed = function(config) {
    var self = this;
    self.fixedSelector = self.fixedSelector || self.selector
    if (!self.fixedStatement && self.innerStyleSheet) {
        self.fixedStatement = self.innerStyleSheet.fixed(config)
    }
    self.fixedStatement = self.fixedStatement || self.statement
    return self.fixedSelector + ' {\n    ' + self.fixedStatement.split('\n').join('\n    ') + '\n}'
}
NestedStatement.prototype._compressedStatement = function(browser) {
    var self = this;
    var stmt = self.compressedStatement
    if (!stmt) {
        stmt = Cleaner.clean(self.fixedStatement);
        if (self.innerStyleSheet) {
            stmt = self.innerStyleSheet.compress(browser)
        }
    } 
    return '{' + stmt + '}'
}
NestedStatement.prototype.toString = function () {
    var self = this;
    return self.statement
}

module.exports = NestedStatement;

})
// auto generated by concat 
;define('ckstyle/entity/rule', function(require, exports, module) {

var helper = require('./entityutil');
var Cleaner = helper.Cleaner;
var doRuleDetect = require('../browsers/Hacks').doRuleDetect
var ALL = require('../browsers/BinaryRule').ALL

function Rule(selector, name, value, ruleSet) {
    var self = this;

    self.roughName = name
    self.roughValue = value
    self.roughSelector = selector

    self.name = Cleaner.clearName(name)
    self.value = Cleaner.clearValue(value)
    self.selector = Cleaner.clearSelector(selector)

    self.strippedName = name.trim()
    self.strippedValue = value.trim()
    self.strippedSelector = selector.trim()

    self.fixedName = ''
    self.fixedValue = ''
    self.fixedPrefix = ''
    self.ruleSet = ruleSet

    self.browser = doRuleDetect(self.roughName, self.roughValue)
    self.toBeUsed = {}
}

Rule.prototype.rebase = function() {
    var self = this;
    self.fixedName = ''
    self.fixedValue = ''
}
    
Rule.prototype.reset = function(name, value) {
    var self = this;
    self.roughName = self.name = self.strippedName = self.fixedName = name
    self.roughValue = self.value = self.strippedValue = self.fixedValue = value
}

Rule.prototype.compress = function(browser) {
    var self = this;
    browser = browser || ALL;

    if (!self.browser) {
        return '';
    }
    if ((self.browser & browser) == 0) {
        return ''
    }
    var name = self.fixedName ? (self.fixedName + '').trim() : self.name
    var value = self.fixedValue ? (self.fixedValue + '').trim() : self.value
    return name + ':' + Cleaner.clearValue(Cleaner.clean(value)) + ';'
}

Rule.prototype.fixed = function() {
    var self = this;
    var name = (self.fixedName || self.strippedName) + ''
    var value = (self.fixedValue || self.strippedValue) + ''
    return name + ': ' + self.fixedPrefix + Cleaner.clearValue(Cleaner.clean(value)) + ';'
}

Rule.prototype.getRuleSet = function() {
    var self = this;
    return self.ruleSet
}

Rule.prototype.toString = function() {
    var self = this;
    return ' roughName: ' + self.roughName + '\n name: ' + self.name + '\n roughValue: ' + self.roughValue + '\n value: ' + self.value + '\n';
}

module.exports = Rule;

})
// auto generated by concat 
;define('ckstyle/entity/ruleset', function(require, exports, module) {

var helper = require('./entityutil');
var Cleaner = helper.Cleaner;
var doRuleSetDetect = require('../browsers/Hacks').doRuleSetDetect
var ALL = require('../browsers/BinaryRule').ALL

var Rule = require('./rule');

function RuleSet(selector, values, comment, styleSheet) {
    var self = this;
    self.extra = false
    self.roughSelector = selector
    self.roughValue = values
    self.roughComment = comment

    self.selector = Cleaner.clearSelector(selector)
    self.values = Cleaner.clearValues(values)
    self.comment = Cleaner.clearComment(comment)

    self.fixedSelector = ''
    self.fixedComment = ''

    self.styleSheet = styleSheet
    self._rules = []

    self.singleLineFlag = (self.roughValue.split('\n').length == 1)

    self.browser = doRuleSetDetect(self.roughSelector)
    self.toBeUsed = {}
}


RuleSet.prototype.rebase = function() {
    var self = this;
    self.fixedSelector = ''
    self.fixedComment = ''
}

RuleSet.prototype.extendSelector = function(other) {
    var self = this;
    var splited = [];
    var selectors = self.selector.split(',');
    for(var i = 0; i < selectors.length; i++) {
        if (selectors[i].trim() != '') {
            splited.push(selectors[i].trim());
        }
    }
    var otherSplited = [];
    var selectors = other.selector.split(',');
    for(var i = 0; i < selectors.length; i++) {
        if (selectors[i].trim() != '') {
            otherSplited.push(selectors[i].trim());
        }
    }

    otherSplited.forEach(function(x) {
        if (splited.indexOf(x) == -1) {
            self.selector = self.selector + ', ' + x
            self.roughSelector = self.roughSelector + ', ' + x
            self.fixedSelector = self.fixedSelector + ',' + x
        }
    });

    if (other.comment.length != 0 && self.comment.indexOf(other.comment) == -1) {
        // do not need duplicated comment
        self.roughComment = self.roughComment + ('\n' + other.roughComment)
        self.comment = self.comment + '\n' + other.comment
        self.fixedComment = self.fixedComment + '\n' + other.fixedComment
    }
}

RuleSet.prototype.compressRules = function(browser) {
    var self = this;
    browser = browser || ALL;
    var collector = []
    self._rules.forEach(function(rule) {
        compressed = rule.compress(browser)
        if (compressed != '') {
            collector.push(compressed)
        }
    });
    var collected = collector.join('')
    if (collected != '') {
        collected = collected.slice(0, -1)
    }
    return collected
}

RuleSet.prototype.compress = function(browser) {
    var self = this;
    browser = browser || ALL;
    if (!self.browser) {
        return '';
    }
    if (!(self.browser & browser))
        return ''
    var result = '';
    var compressedComment = self.comment.replace(/\/\*\s*/, '/*').replace(/\s*\*\//, '*/');
    if (compressedComment.indexOf('/*!') == 0) {
        result = compressedComment.split('*/')[0] + '*/';
    }
    result = result + (self.fixedSelector || self.selector);
    if (result.indexOf(',') != -1) {
        // remove duplicated selectors
        var selectors = []
        var splited = result.split(',');
        splited.forEach(function(x) {
            x = x.trim()
            if (selectors.indexOf(x) != -1) {
                return;
            }
            selectors.push(x)
        })
        result = selectors.join(',');
    }
    var compressed = self.compressRules(browser)
    if (compressed == '')
        return ''
    result = result + '{' + compressed + '}'
    return result
}

RuleSet.prototype.fixedRules = function(config) {
    var self = this;
    var collector = []
    var spaces = '    '
    var seperator = '\n'
    if (config && config.singleLine) {
        spaces = ''
        seperator = ' '
    }
    self._rules.forEach(function(rule) {
        collector.push(spaces + rule.fixed())
    })
    var collected = collector.join(seperator)
    return collected
}

RuleSet.prototype.fixed = function(config) {
    var self = this;
    var comment = self.fixedComment || self.comment
    var selector = self.fixedSelector || self.selector
    if (selector.indexOf(',') != -1) {
        // remove duplicated selectors
        selectors = []
        selector.split(',').forEach(function(x) {
            x = x.trim()
            if (selectors.indexOf(x) != -1)
                return;
            selectors.push(x)
        })
        selector = selectors.join(',\n')
    }
    var seperator = '\n'
    if (config && config.singleLine) {
        seperator = ' '
    }
    var result = selector + ' {' + seperator + self.fixedRules(config) + seperator + '}'
    if (comment != '') {
        result = comment + '\n' + result
    }
    return result
}

RuleSet.prototype.getSingleLineFlag = function() {
    var self = this;
    return self.singleLineFlag
}

RuleSet.prototype.getStyleSheet = function() {
    var self = this;
    return self.styleSheet
}

RuleSet.prototype.addRuleByStr = function(selector, attr, value) {
    var self = this;
    self._rules.push(new Rule(selector, attr, value, self))
}
RuleSet.prototype.indexOf = function(name) {
    var self = this;
    var counter = 0
    name = name.trim();
    for(var i = 0; i < self._rules.length; i++) {
        var rule = self._rules[i];
        if (rule.roughName.trim() == name) {
            return counter
        }
        counter = counter + 1
    }
    return -1
}
RuleSet.prototype.removeRuleByIndex = function(index) {
    var self = this;
    if (index < self._rules.length) {
        self._rules[index] = null;
    }
}
RuleSet.prototype.clean = function() {
    var self = this;
    var newRules = []
    self._rules.forEach(function(rule) {
        if (!rule) {
            return;
        }
        newRules.push(rule)
    })
    self._rules = newRules
}
RuleSet.prototype.existNames = function(name) {
    var self = this, names;
    if (name.indexOf(',') != -1) {
        names = name.split(',')
    } else {
        names = [name]
    }
    for(var i = 0; i < names.length; i++) {
        var name = names[i];
        name = name.trim()
        for(var j = 0; j < self._rules.length; j++) {
            var rule = self._rules[j]
            if (rule.name == name) {
                return true;
            }
        }
    }
    return false
}

RuleSet.prototype.existRoughNames = function(name) {
    var self = this, names;
    if (name.indexOf(',') != -1) {
        names = name.split(',')
    } else {
        names = [name]
    }
    for(var i = 0; i < names.length; i++) {
        var name = names[i];
        name = name.trim()
        for(var j = 0; j < self._rules.length; j++) {
            var rule = self._rules[j]
            if (rule.strippedName == name) {
                return true;
            }
        }
    }
    return false
}

RuleSet.prototype.existValueStarts = function(prefix) {
    var self = this, prefixes;
    if (prefix.indexOf(',') != -1) {
        prefixes = prefix.split(',')
    } else {
        prefixes = [prefix]
    }
    for(var i = 0; i < prefixes.length; i++) {
        var prefix = prefixes[i];
        prefix = prefix.trim()
        for(var j = 0; j < self._rules.length; j++) {
            var rule = self._rules[j]
            if (rule.strippedValue.indexOf(prefix) == 0) {
                return true;
            }
        }
    }
    return false
}

RuleSet.prototype.getRuleByStrippedName = function(name) {
    var self = this;
    for(var i = 0; i < self._rules.length; i++) {
        var rule = self._rules[i];
        if (rule.strippedName == name) {
            return rule
        }
    }
}
RuleSet.prototype.getRuleByRoughName = function(name) {
    var self = this;
    for(var i = 0; i < self._rules.length; i++) {
        var rule = self._rules[i];
        if (rule.roughName == name) {
            return rule
        }
    }
}
RuleSet.prototype.getRuleByName = function(name) {
    if (!name) {
        return;
    }
    var self = this;
    for(var i = 0; i < self._rules.length; i++) {
        var rule = self._rules[i];
        if (rule.name == name) {
            return rule
        }
    }
}

RuleSet.prototype.extendRules = function(ruleSet) {
    var self = this;
    var rules = self._rules;
    var other = ruleSet.getRules();
    self._rules = rules.concat(other);
}
RuleSet.prototype.getRules = function() {
    var self = this;
    return self._rules
}
RuleSet.prototype.setRules = function(newRules) {
    var self = this;
    self._rules = newRules
}
RuleSet.prototype.toString = function() {
    var self = this;
    return self.selector + ' {' + self.roughValue + '}';
}

module.exports = RuleSet;

})
// auto generated by concat 
;define('ckstyle/entity/stylesheet', function(require, exports, module) {

var RuleSet = require('./ruleset');
var ExtraStatement = require('./extrastatement');
var NestedStatement = require('./nestedstatement');
var EntityUtil = require('./entityutil');

function StyleSheet(fileName) {
    this._ruleSets = [];
    this._file = fileName || '';
    //self.browser = ALL
    this.toBeUsed = {};
}

StyleSheet.prototype.addRuleSetByStr = function(selector, attrs, comment) {
    this._ruleSets.push(new RuleSet(selector, attrs, comment, this))
};

StyleSheet.prototype.addExtraStatement = function(operator, statement, comment) {
    this._ruleSets.push(new ExtraStatement(operator, statement, comment, this))
};

StyleSheet.prototype.addNestedRuleSet = function(selector, attrs, comment) {
    var stmt = new NestedStatement(selector, attrs, comment, this)
    this._ruleSets.push(stmt)
    return stmt
};

StyleSheet.prototype.setFile = function(fileName) {
    this._file = fileName
};

StyleSheet.prototype.getFile = function() {
    var self = this;
    return this._file
};

StyleSheet.prototype.getRuleSets = function() {
    var self = this;
    return self._ruleSets
};

StyleSheet.prototype.removeRuleSetByIndex = function(index) {
    var self = this;
    self._ruleSets[index] = null
};

StyleSheet.prototype.removeRuleSet = function(ruleSet) {
    var self = this;
    var newRuleSets = []
    for(var i = 0; i < this._ruleSets.length; i ++) {
        x = this._ruleSets[i];
        if (x == ruleSet) {
            continue
        }
        newRuleSets.push(x)
    }
    this._ruleSets = newRuleSets;
};

StyleSheet.prototype.clean = function() {
    var self = this;
    var newRuleSets = []
    for(var i = 0; i < this._ruleSets.length; i ++) {
        x = this._ruleSets[i];
        if (x == null) {
            continue
        }
        newRuleSets.push(x)
    }
    this._ruleSets = newRuleSets
};

StyleSheet.prototype.getRuleSetBySelector = function(selector) {
    var self = this;
    for(var i = 0; i < this._ruleSets.length; i ++) {
        ruleSet = this._ruleSets[i];
        if (ruleSet.selector == selector) {
            return ruleSet
        }
    }
};

StyleSheet.prototype.compress = function(browser) {
    browser = browser || ALL;
    var self = this;
    var result = []
    for(var i = 0; i < this._ruleSets.length; i ++) {
        ruleSet = this._ruleSets[i];
        if (ruleSet.browser && !(ruleSet.browser & browser)) {
            continue
        }
        result.push(ruleSet.compress(browser))
    }
    return result.join('')
};

StyleSheet.prototype.fixed = function(config) {
    var self = this;
    var result = []
    for(var i = 0; i < this._ruleSets.length; i ++) {
        ruleSet = this._ruleSets[i];
        result.push(ruleSet.fixed(config))
    }
    return result.join('\n\n')
};

StyleSheet.prototype.rebase = function() {
    var self = this;
    self._ruleSets.forEach(function(ruleSet) {
        ruleSet.rebase()
    });
};

module.exports = StyleSheet;

})
// auto generated by concat 
;define('ckstyle/index', function(require, exports, module) {

module.exports = require('./ckstyler')

})
// auto generated by concat 
;define('ckstyle/logger/index', function(require, exports, module) {

var colors = require('colors')

var prefix = '[CKStyle] '.cyan

function out(msg) {
    console.log(msg)
}

function log(msg) {
    console.log(prefix + msg)
}

function warn(msg) {
    console.log(prefix + msg.yellow)
}

function error(msg) {
    console.log(prefix + msg.red)
}

function ok(msg) {
    console.log(prefix + msg.green)
}

exports.log = log
exports.warn = warn
exports.error = error
exports.ok = ok
exports.out = out

})
// auto generated by concat 
;define('ckstyle/parser/helper', function(require, exports, module) {

function isAlphaChar(char) {
    return char >= 97 && char <= 122
}

specialTexts = [
    {'start':'@', 'text':'@import', 'end':';\n'},
    {'start':'@', 'text':'@charset', 'end':';\n'},
    {'start':'@', 'text':'@namespace', 'end':';'},
    {'start':'@', 'text':'@-css-compiler ', 'end':'}'},
    {'start':'@', 'text':'@-css-compiler{', 'end':'}'},
    {'start':'@', 'text':'@-css-compiler-', 'end':';\n'}]

specialStartChars = [];
for (var i = specialTexts.length - 1; i >= 0; i--) {
    var current = specialTexts[i];
    if (specialStartChars.indexOf(current.start) == -1) {
        specialStartChars.push(current.start);
    }
};

nestedStatements = ['keyframes', '@media', '@-moz-document']

function isSpecialStart(char) {
    for (var i = specialStartChars.length - 1; i >= 0; i--) {
        if (specialStartChars[i] == char) {
            return true;
        }
    }
    return false;
}

function isNestedStatement(selector) {
    if (selector.indexOf('@') == -1) {
        return false
    }
    for (var i = nestedStatements.length - 1; i >= 0; i--) {
        if (selector.indexOf(nestedStatements[i]) != -1)
            return true
    }
    return false;
}

function handleSpecialStatement(text, i, length, char) {
    for(var k = 0; k < specialTexts.length; k++) {
        var obj = specialTexts[k];
        if (char == obj['start'] && isSpecialString(text, i, obj["text"])) {
            tmp = findCharFrom(text, i, length, obj["end"])
            tmp.push(obj["text"])
            return tmp;
        }
    }
    return [null, null, null];
}

function findCharFrom(text, i, length, left, right) {
    right = right || null;
    var counter = 1
    var collector = ''
    for(var j = i + 1; j < length; j++) {
        if (text[j] == ',') {
            collector = collector + text[j]
            continue;
        }
        if (right == null) {
            if (text[j] == left || left.indexOf(text[j]) != -1) {
                break;
            } else {
                collector = collector + text[j]
            }
        } else {
            if (text[j] == left) {
                collector = collector + text[j]
                counter = counter + 1
            } else if (text[j] == right) {
                collector = collector + text[j]
                counter = counter - 1
                if (counter == 0) {
                    break;
                }
            } else {
                collector = collector + text[j]
            }
        }
    }
    return [j, collector]
}

function isSpecialString(text, i, string) {
    return text.substring(i, i + string.length) == string
}

function isCommentStart(char, text, i) {
    return char == '/' && i + 1 < text.length && text[i + 1] == '*'
}

function isCommentEnd(char, text, i) {
    return char == '/' && text[i - 1] == '*'
}

exports.isCommentStart = isCommentStart;
exports.isCommentEnd = isCommentEnd;
exports.isSpecialString = isSpecialString;
exports.findCharFrom = findCharFrom;
exports.isAlphaChar = isAlphaChar;
exports.isSpecialStart = isSpecialStart;
exports.isNestedStatement = isNestedStatement;
exports.handleSpecialStatement = handleSpecialStatement;

})
// auto generated by concat 
;define('ckstyle/parser/index', function(require, exports, module) {

var StyleSheet = require('../entity/index').StyleSheet;

var helper = require('./helper');
findCharFrom = helper.findCharFrom;
handleSpecialStatement = helper.handleSpecialStatement;
isCommentStart = helper.isCommentStart;
isCommentEnd = helper.isCommentEnd
isSpecialStart = helper.isSpecialStart
isNestedStatement = helper.isNestedStatement;

function CSSParser(css, fileName, config) {
    this.reset(css, fileName, config);
}

CSSParser.prototype.reset = function(css, fileName, config) {
    this.roughCss = css;
    this.fileName = fileName;
    this.totalLength = css.length;
    this.styleSheet = new StyleSheet(fileName);
    this._parseErrors = [];
};

CSSParser.prototype.doParse = function(config) {
    var self = this;
    config = config || {};
    if (self.totalLength == 0) {
        return;
    }
    var prevChar = null, inComment = false, length = self.totalLength,
        text = self.roughCss, selector = '', commentText = '', charIndex = -1 , 
        comments = [], char
    var realComment;
    while (true) {
        if (charIndex >= length - 1) {
            break;
        }
        charIndex = charIndex + 1
        char = text[charIndex]
        if (!inComment && isCommentStart(char, text, charIndex)) {
            commentText = ''
            inComment = true
        }
        if (isCommentEnd(char, text, charIndex)) {
            commentText = commentText + char
            inComment = false
            comments.push(commentText)
            commentText = ''
            continue
        }
        if (inComment) {
            commentText = commentText + char
            continue;
        }
        if (isSpecialStart(char)) {
            var tmp = handleSpecialStatement(text, charIndex, length, char);
            var nextPos = tmp[0];
            var attrs = tmp[1];
            var operator = tmp[2];
            if (nextPos !== null) {
                realComment = ''
                if (comments.length != 0) {
                    realComment = comments.join('\n')
                    comments = []
                }
                self.styleSheet.addExtraStatement(operator, char + attrs + text[nextPos], realComment)
                charIndex = nextPos
                selector = ''
                commentText = ''
                comments = []
                continue
            }
        }

        if (char == '{') {
            var tmp = findCharFrom(text, charIndex, length, '{', '}');
            var nextBracePos = tmp[0];
            var attributes = tmp[1];
            // do not need the last brace
            var realComment = ''
            if (comments.length != 0) {
                realComment = comments.join('\n')
                comments = []
            }
            if (isNestedStatement(selector)) {
                var nestedCss = attributes
                // remove end '}'
                nestedCss = nestedCss.slice(0, -1)
                var stmt = self.styleSheet.addNestedRuleSet(selector, nestedCss, realComment)
                parseNestedStatment(stmt, nestedCss, this.fileName, this.config)
            } else {
                self.styleSheet.addRuleSetByStr(selector, attributes.slice(0, -1), realComment)
            }
            commentText = ''
            charIndex = nextBracePos
            selector = ''
        } else if (char == '}') {
            selector = ''
        } else {
            selector = selector + char
        }
    }
        
    function parseNestedStatment(stmt, nestedCss, fileName, config) {
        var innerParser = new CSSParser(nestedCss, fileName, config)
        innerParser.doParse(config)
        stmt.innerStyleSheet = innerParser.styleSheet
    }

    self.styleSheet.getRuleSets().forEach(function(ruleSet) {
        var errors = self.doParseRules(ruleSet)
        self._parseErrors = self._parseErrors.concat(errors);
    })
};

CSSParser.prototype.getParseErrors = function () {
    return this._parseErrors
};

CSSParser.prototype.doParseRules = function(ruleSet) {
    var errors = []
    if (ruleSet.extra) {
        return errors
    }
    var text = ruleSet.roughValue
    var singleLine = text.split('\n').length == 1
    var selector = ruleSet.selector.trim()
    var i = -1
    var length = text.length
    var inComment = false
    var collector = ''
    var attr = ''
    var value = ''
    var valueStarted = false
    while (true) {
        if (i == length - 1)
            break;
        i = i + 1
        char = text[i]
        if (!valueStarted && isCommentStart(char, text, i)) {
            inComment = true
            //errors.push([-1, 'find comment in values of "%s"' % selector])
            collector = ''
        }
        if (!valueStarted && isCommentEnd(char, text, i)) {
            collector = ''
            inComment = false
            continue
        }
        if (!valueStarted && inComment) {
            continue
        }
        if (char == ':') {
            if (valueStarted) {
                collector = collector + char
            } else {
                valueStarted = true
                attr = collector
                collector = ''
            }
        } else if (char == ';' || char == '\n' || i == length - 1) {
            valueStarted = false
            if (attr == '') {
                collector = ''
                continue
            }
            value = collector + char
            // no value yet
            if (value.trim().length == 0) {
                continue;
            }
            // not over yet
            if (value.trim().slice(-1) == ',') {
                continue;
            }
            ruleSet.addRuleByStr(selector, attr, value)
            attr = ''
            value = ''
            collector = ''
        } else if (char == '{') {
            var tmp = findCharFrom(text, i, length, '{', '}');
            nextBracePos = tmp[0];
            attributes = tmp[1]; 
            collector = collector + char + attributes
            i = nextBracePos
        } else if (char == '}') {
            collector = collector + char
        } else if (char == '(') {
            var tmp = findCharFrom(text, i, length, '(', ')');
            nextBracePos = tmp[0];
            attributes = tmp[1];
            collector = collector + char + attributes
            i = nextBracePos
            if (i == length - 1) {
                ruleSet.addRuleByStr(selector, attr, collector)
                break;
            }
        } else {
            collector = collector + char
        }
    }
    return errors
};

exports.CSSParser = CSSParser;

// if (!module.parent) {
//     text = '/*fdsafdas*/.publisher-c .global-publisher-selector{ top:5px;}\
//  .publisher-a .global-publisher-selector-status a,\
//  .publisher-a .global-publisher-selector-status .global-publisher-status-trigger:hover,\
//  .publisher-a .global-publisher-selector .active .global-publisher-status-trigger {\
//     background-position: 0 1px;\
// }\
//  .publisher-a .global-publisher-selector-share a,\
//  .publisher-a .global-publisher-selector-share a:hover,\
//  .publisher-a .global-publisher-selector .active .global-publisher-share-trigger{\
//     background-position: 0 -48px;\
//  }'
//     var parser = new CSSParser(text)
//     parser.doParse();
//     console.log(parser.styleSheet.getRuleSets()[0]);
// }

})
// auto generated by concat 
;define('ckstyle/plugins/FED1CanNotSetFontFamily', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper')

module.exports = global.FEDCanNotSetFontFamily = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'no-font-family'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'can not set font-family for "${selector}"'
    }

    this.check = function(self, rule, config) {
        if (rule.name == 'font-family')
            return false

        if (rule.name == 'font') {
            // many fonts
            if (rule.value.indexOf(',') != -1)
                return false

            // one font
            var splited = rule.value.split(' ')
            if (helper.isFontFamilyName(splited[splited.length - 1])) {
                return false
            }
        }

        return true
    }

    // if font-family set, then make it clean.
    this.fix = function(self, rule, config) {
        if (rule.name == 'font-family' || rule.name == 'font') {
            rule.fixedValue = rule.fixedValue.replace(/['"](\w+)['"]/g, function(match, res) {
                return res;
            })
        }
    }

    this.__doc__ = {
        "summary":"不允许业务代码设置字体",
        "desc":"由于业务代码中随意设置字体，导致字体取值混乱，因此不允许随意在业务代码中设置字体"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1Css3PropPrefix', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper');

module.exports = global.FEDCss3PropPrefix = new Class(RuleChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'css3-with-prefix'
        self.errorLevel_keepInOrder = ERROR_LEVEL.WARNING
        self.errorLevel_missing = ERROR_LEVEL.ERROR
        self.errorLevel = ERROR_LEVEL.LOG

        self.errorMsg_keepInOrder = 'css3 prop "${name}" should keep in "-webkit-,-moz-,-ms-,-o-,std" order in "${selector}"'
        self.errorMsg_missing = 'css3 prop "${name}" missing some of "-webkit-,-moz-,-o-,std" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, rule, config) {
        var name = rule.name
        // only for css3 props
        if (!helper.isCss3Prop(name))
            return true

        if (!helper.isCss3PrefixProp(name))
            return true

        if (helper.doNotNeedPrefixNow(name))
            return true
        
        var ruleSet = rule.getRuleSet()
        var webkitName = '-webkit-' + name
        var mozName = '-moz-' + name
        var msName = '-ms-' + name // not necessary
        var oName = '-o-' + name

        if (!(ruleSet.existRoughNames(webkitName) 
                && ruleSet.existRoughNames(mozName)
                && ruleSet.existRoughNames(oName)
                && ruleSet.existRoughNames(name))) {
            self.errorMsg = self.errorMsg_missing
            self.errorLevel = self.errorLevel_missing
            return false
        }

        // in order -webkit-  -moz-  -ms-  -o-  std
        var webkit = ruleSet.indexOf(webkitName)
        var moz = ruleSet.indexOf(mozName)
        var ms = ruleSet.indexOf(msName)
        if (ms == -1)
            ms = moz
        var o = ruleSet.indexOf(oName)
        var std = ruleSet.indexOf(name)

        if (!(webkit < moz && moz <= ms && ms < o && o < std)) {
            self.errorMsg = self.errorMsg_keepInOrder
            self.errorLevel = self.errorLevel_keepInOrder
            return false
        }
        return true
    }

    this.__doc__ = {
        "summary":"CSS3前缀相关检查",
        "desc":"CSS3属性的前缀，有的可以省略，比如：<br>\
            <code>border-radius</code><br>\
            有的是省略，必须写全，比如：<br><code>transition</code> <code>transform</code>等<br>\
            在编写顺序上，本工具要求按照<br>\
            <code>-webkit-,-moz-,-ms-,-o-,std</code><br>的顺序来编写，并且严格将属性的第一个字符对齐。"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1Css3PropSpaces', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper');

module.exports = global.FEDCss3PropSpaces = new Class(RuleChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'css3-prop-spaces'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_multi = 'css3 prop "${name}" should align to right in "${selector}"'
        self.errorMsg_single = 'should have 1(only) space before css3 prop "${name}" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, rule, config) {
        var name = rule.name
        // only for css3 props
        if (!helper.isCss3Prop(name))
            return true

        if (!helper.isCss3PrefixProp(name))
            return true
        
        if (helper.doNotNeedPrefixNow(name)) {
            // if exists prefix, then should keep spaces
            if (!rule.getRuleSet().existRoughNames('-webkit-' + name + 
                ',-moz-' + name + 
                ',-ms-' + name + 
                ',-o-' + name)) {
                return true
            }
        }

        var roughName = rule.roughName

        if (!rule.getRuleSet().singleLineFlag) {
            // 12 = 4 + 8, 4 spaces, 8 for align
            if (helper.len(roughName.split(name)[0]) != 12) {
                self.errorMsg = self.errorMsg_multi
                return false
            }
        } else {
            if (helper.startswith(roughName, '  ') || !helper.startswith(roughName, ' ')) {
                self.errorMsg = self.errorMsg_single
                return false
            }
        }
        return true
    }

    this.fix = function(self, rule, config) {
        this._handleName(rule, config);
        this._handleValue(rule, config);
    }

    this._handleValue = function(self, rule, config) {
        var value = rule.fixedValue
        var fixedValue
        var reg = /\s*-(webkit|moz|ms|khtml|o)-/
        if (value.indexOf('-') == 0) {
            var matched = value.match(reg);
            if (!matched) {
                return
            }
            var prefix = matched[0]
            rule.fixedPrefix = helper.times(' ', 8 - helper.len(prefix))
        } else {
            var valueName = value.split('(')[0];
            if (!valueName) {
                return
            }
            valueName = valueName.replace(reg, '')
            if (!rule.getRuleSet().existValueStarts('-webkit-' + valueName + 
                ',-moz-' + valueName + 
                ',-ms-' + valueName + 
                ',-o-' + valueName)) {
                return
            }
            rule.fixedPrefix = helper.times(' ', 8)
        }
    }

    this._handleName = function(self, rule, config) {
        var name = rule.name
        // only for css3 props
        if (!helper.isCss3Prop(name))
            return

        if (!helper.isCss3PrefixProp(name))
            return

        if (!rule.getRuleSet().existRoughNames('-webkit-' + name + 
                ',-moz-' + name + 
                ',-ms-' + name + 
                ',-o-' + name)) {
            return
        }

        var fixedName = rule.fixedName
        var prefix = fixedName.split(name)[0]
        if (rule.selector.indexOf('%') != -1) {
            var remained = '-webkit-,-moz-,-ms-,-o-,'.replace(prefix + ',', '')
            var splited = remained.slice(0, -1).split(',')
            var collector = []
            splited.forEach(function(x) {
                collector.push(x + name);
            })
            var testString = collector.join(',')
            if (!rule.getRuleSet().existRoughNames(testString)) {
                return
            }
        }

        rule.fixedName = (config.singleLine ? '' : helper.times(' ', 8 - helper.len(prefix))) + fixedName
    }

    this.__doc__ = {
        "summary":"CSS3缩进相关检查",
        "desc":"CSS3属性的缩进，必须将属性名称的第一个字符对齐。即：<br>\
            <code>-webkit-transition:3s;</code>\
            <br><code>&nbsp;&nbsp;&nbsp;-moz-transition:3s;</code>\
            <br><code>&nbsp;&nbsp;&nbsp;&nbsp;-ms-transition:3s;</code>\
            <br><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-o-transition:3s;</code>\
            <br><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;transition:3s;</code>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1DistinguishBrowserRule', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper');
var Browser = require('../browsers/Detector').Browser

module.exports = global.FEDDistinguishBrowserRule = new Class(RuleChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'rule-for-browsers'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = ''
    }

    this.check = function (self, rule, config) {
        return true
    }

    this.fix = function(self, rule, config) {
        Browser.handleRule(rule)
    }

    this.__doc__ = {
        "summary":"在属性级别区分浏览器",
        "desc":"目的是针对不同的浏览器，生成不同的CSS"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1FixCommentInValue', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper')

module.exports = global.FEDFixCommentInValue = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'fix-comment-in-value'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = ''
        self._private = true
    }

    this.check = function(self, rule, config) {
        return true
    }   
    
    this.fix = function(self, rule, config) {
        if (rule.name == 'expression')
            return
        
        var value = rule.fixedValue
        if (value.indexOf('/*') == -1)
            return

        var splited = value.split('/*')
        var collector = []
        for(var i = 0; i < splited.length; i++) {
            var x = splited[i];
            tmp = x.split('*/')
            if (helper.len(tmp) == 1) {
                collector.push(tmp[0])
            } else {
                collector.push(tmp[1])
            }
        }
        rule.fixedValue = collector.join('')
    }

    this.__doc__ = {
        "summary":"修复属性中的注释",
        "desc":"width:/* fdasfdas */ 100px /* fdafdas */; ==> width:100px;"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1FixOutlineZero', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker

module.exports = global.FEDFixOutlineZero = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'fix-outline-none'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'fix outline:none for "${selector}"'
    }

    this.check = function(self, rule, config) {
         if (rule.name == 'outline') {
            if (self._findOutlineNone(rule.value)){
                return false
            }
        }
        return true
    }
    
    this.fix = function(self, rule, config) {
        if (rule.name == 'outline') {
            if (self._findOutlineNone(rule.value)){
                 rule.fixedValue = rule.fixedValue.replace(/none/, "0");
            }
        }
    }

    this._findOutlineNone = function(self, value) {
        return value.indexOf('none') !== -1
    }

    this.__doc__ = {
        "summary":"修复outline:none",
        "desc":"<code>outline:none</code> 和 <code>outline:0</code> 实现了相同的功能，但是后者的代码更简洁，便于压缩。"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1FontSizeShouldBePtOrPx', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper');

module.exports = global.FEDFontSizeShouldBePtOrPx = new Class(RuleChecker, function () {

    this.__init__ = function (self) {
        self.id = 'font-unit'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg_ptOrPx = 'font-size unit should be px/pt in "${selector}"'
        self.errorMsg_xsmall = 'font-size should not be small/medium/large in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, rule, config) {
        if (rule.name != 'font-size')
            return true

        var value = rule.value
        if (value.indexOf('small') != -1 || 
            value.indexOf('medium') != -1 || 
            value.indexOf('large') != -1) {
            self.errorMsg = self.errorMsg_xsmall
            return false
        }

        if (value == '0')
            return true

        if (helper.endswith(value, 'pt'))
            return true

        if (helper.endswith(value, 'px'))
            return true

        self.errorMsg = self.errorMsg_ptOrPx
        return false
    }

    this.__doc__ = {
        "summary":"字体的单位必须用px或pt",
        "desc":"字体的单位可以有很多种，比如 <code>px pt em %</code> 等等，为了统一取值，统一要求为 <code>px/pt</code> ， 例如：<br>\
            <code>font-size: 12px;</code><br>\
            <code>font-size: 14pt;</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1HackAttributeInCorrectWay', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper');

module.exports = global.FEDHackAttributeInCorrectWay = new Class(RuleChecker, function () {

    this.__init__ = function (self) {
        self.id = 'hack-prop'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = '"${name}" is not in correct hacking way in "${selector}"'
    }

    this.check = function (self, rule, config) {
        if (rule.value.indexOf('\\0') != -1)
            return false

        var stripped = rule.roughName.trim()
        if (rule.name == stripped.toLowerCase())
            return true

        if (helper.isCss3PrefixProp(rule.name))
            return true

        if (!helper.startswith(stripped, '_') && 
            !helper.startswith(stripped, '*') && 
            !helper.startswith(stripped, '+'))
            return false

        return true
    }

    this.__doc__ = {
        "summary" : "hack属性时的检查",
        "desc" : "必须使用正确的 hack 方式， 比如 <code>_ * +</code> 等，其他的属性前缀一律不允许"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1HexColorShouldUpper', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

var pattern_color = /#([a-f0-9A-F]+)/g

module.exports = global.FEDHexColorShouldUpper = new Class(RuleChecker, function() {

    this.__init__ = function(self) {
        self.id = 'hexadecimal-color'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_length = 'wrong color length(should be 3 or 6) in "${selector}"'
        self.errorMsg_replace = 'replace "#%s" with "#%s" in "${selector}"'
        self.errorMsg_upper = 'color should in upper case in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        var value = rule.value
        if (value.indexOf('#') == -1)
            return true

        var found = self._findColor(rule.value)
        for(var i = 0; i < found.length; i++) {
            var f = found[i];
            var flag = self._checkEach(f)
            if (!flag)
                return false
        }
        return true
    }

    this.fix = function(self, rule, config) {
        var value = rule.fixedValue
        if (value.indexOf('#') == -1) 
            return

        var hasImportant = rule.fixedValue.indexOf('important') != -1
        var found = self._findColor(rule.fixedValue)
        for(var i = 0; i < found.length; i++) {
            var f = found[i]
            f = f.trim()
            self._fixEach(rule, f, hasImportant)
        }
    }

    this._checkEach = function(self, found) {
        if (!found)
            return true

        if (self._isLower(found)) {
            self.errorMsg = self.errorMsg_upper
            return false
        }

        if (helper.len(found) == 3)
            return true

        if (self._wrongLength(found)) {
            self.errorMsg = self.errorMsg_length
            return false
        }

        if (self._isDuplicate(found)) {
            self.errorMsg = self.errorMsg_replace.replace('%s', found).replace('%s', found[0]+found[2]+found[4])
            return false
        }
        
        return true
    }

    this._fixEach = function(self, rule, found, hasImportant) {
        if (self._isLower(found)) {
            rule.fixedValue = rule.fixedValue.replace('#' + found, '#' + found.toUpperCase())
            found = found.toUpperCase()
        }

        if (helper.len(found) == 3)
            return

        if (!hasImportant && self._wrongLength(found)) {
            var finalColor = helper.len(found) > 6 ? found.slice(0, 6) : (found + helper.times('F', 6 - helper.len(found)))
            rule.fixedValue = rule.fixedValue.replace('#' + found, '#' + finalColor)
            found = finalColor
        }
        if (self._isDuplicate(found)) {
            rule.fixedValue = rule.fixedValue.replace('#' + found, '#' + found[0] + found[2] + found[4])
        }
    }

    this._wrongLength = function(self, found) {
        return helper.len(found) != 3 && helper.len(found) != 6
    }

    this._isLower = function(self, found) {
        return found && found != found.toUpperCase()
    }

    this._isDuplicate = function(self, found) {
        return found[0] == found[1] && found[2] == found[3] && found[4] == found[5]
    }

    this._findColor = function(self, value) {
        var splited = value.split(' ')
        var found = []
        for(var i = 0; i < splited.length; i++) {
            var x = splited[i];
            x = x.trim()
            matcher = x.match(pattern_color)
            if (matcher) {
                found = found.concat(matcher)
            }
            //if x.startswith('#'):
            //    found.append(x.split('!important')[0][1:].split(',')[0].split(')')[0])
            //elif x.find('(#') != -1:
            //    found.append(x.split('(#')[1].split('!important')[0].split(',')[0].split(')')[0])
        }
        for(var i = 0; i < found.length; i++) {
            found[i] = found[i].replace('#', '')
        }
        return found
    }

    this.__doc__ = {
        "summary":"16进制颜色大写&缩写",
        "desc":"<p>浏览器会先将小写的颜色值转换成大写，所以写成大写格式可以省略这部分的开销，并且尽量省略，例如：\
            </br><code>color:#ffffff; </code><br/><code>==></code><br/><code>color:#FFF;</code></p>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1MultiLineSpaces', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;
var helper = require('./helper')

module.exports = global.FEDMultiLineSpaces = new Class(RuleChecker, function () {

    this.__init__ = function (self) {
        self.id = 'multi-line-space'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_name_pre = 'should have 4 spaces before "${name}" in "${selector}"'
        self.errorMsg_name_after = 'should not have "space" after "${name}" in "${selector}"'
        self.errorMsg_value_pre = 'should have (only) one "space" before value of "${name}" in "${selector}"'
        self.errorMsg = ''
    }
    
    this.check = function(self, rule, config) {
        var singleLine = rule.getRuleSet().getSingleLineFlag()
        if (singleLine)
            return true
        
        var prefix = '    '
        var name = rule.roughName
        var value = rule.roughValue
        var stripped = rule.roughName.trim()

        // leave special css3 props for FEDCss3AttrChecker
        if (helper.isCss3PrefixProp(rule.name)) {
            if (name.slice(-1) == ' ') {
                self.errorMsg = self.errorMsg_name_after
                return false
            }

            if (!(value.indexOf(' ') == 0) || value.indexOf('  ') == 0) {
                self.errorMsg = self.errorMsg_value_pre
                return false
            }

            return true
        }

        if (name.indexOf('\t') != -1)
            name = name.replace(/\t/g, prefix)

        if (!(name.indexOf(prefix) == 0)) {
            self.errorMsg = self.errorMsg_name_pre
            return false
        }
        if (name.indexOf('     ') == 0) {
            self.errorMsg = self.errorMsg_name_pre
            return false
        }
        if (name.slice(-1) == ' ') {
            self.errorMsg = self.errorMsg_name_after
            return false
        }

        if (!(value.indexOf(' ') == 0) || value.indexOf('  ') == 0) {
            self.errorMsg = self.errorMsg_value_pre
            return false
        }

        return true 
    }

    this.__doc__ = {
        "summary":"CSS多行风格的空格检查",
        "desc":"多行风格下，CSS的空格检查包括：\
            <ol>\
                <li>选择器的空格</li>\
                <li>属性的空格</li>\
                <li>结尾}的空格</li>\
            </ol>\
            具体请参见人人相关的CSS规范"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1NoAlphaImageLoader', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;

module.exports = global.FEDNoAlphaImageLoader = new Class(RuleChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-alpha-image-loader';
        self.errorLevel = ERROR_LEVEL.WARNING;
        self.errorMsg = 'should not use AlphaImageLoader in "${selector}"';
    }
    
    this.check = function (self, rule, config) {
        if (rule.value.indexOf('AlphaImageLoader') != -1)
            return false;
        return true

    }

    this.__doc__ = {
        "summary" : "不要使用AlphaImageLoader",
        "desc" : "<code>AlphaImageLoader</code> 主要用于在IE6下显示半透明图片，\
            此举实际上费力不讨好，对IE的性能影响极大，为了更好地实现网页的 \
            <strong>渐进增强</strong> ，建议不要使用 <code>AlphaImageLoader</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1NoExpression', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleChecker = base.RuleChecker;

module.exports = global.FEDNoExpression = new Class(RuleChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-expression';
        self.errorLevel = ERROR_LEVEL.ERROR;
        self.errorMsg_use = 'should not use expression in "${selector}" ';
        self.errorMsg_hack = 'should add hack for expression in "${selector}"';
        self.errorMsg = '';
    }
    
    this.check = function (self, rule, config) {
        var value = rule.value,
            name = rule.name,
            replaced = value.replace(/\s+/g, ''); 
    
        if (value.indexOf('expression') == -1)
            return true;

        if (replaced.indexOf('Expressions') != -1 || 
            replaced.indexOf('this.style.' + name + '=') != -1 || 
            replaced.indexOf('this.runtimeStyle.' + name + '=') != -1) {
            if (rule.name == rule.strippedName) {
                selector = rule.selector.replace(/\s+/g, '')
                if (selector.indexOf('*html') == -1) {
                    self.errorMsg = self.errorMsg_hack;
                    return false;
                }
            }
            return true;
        }
        self.errorMsg = self.errorMsg_use;
        return false;
    }

    this.__doc__ = {
        "summary" : "不要使用非一次性表达式",
        "desc" : "IE下，非一次性expression对性能有很大的影响，或许一次鼠标移动，\
            将触发<strong>成千上万次</strong>的expression表达式的执行，因此，为了浏览器的更新换代，\
            应该杜绝使用非一次性表达式。<br>本工具针对一次性表达式的检查，将判断expression中是否有如下两个内容：\
            <br>1. <code>Expressions</code><br>2. <code>this.style.attrName = </code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1NoUnitAfterZero', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

var pattern_unit = /^[0]+[\w]+/g
var replacer_unit = /,\s+/g

module.exports = global.FEDNoUnitAfterZero = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'del-unit-after-zero'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'unit should be removed when meet 0 in "${selector}"'
    }

    this.check = function(self, rule, config) {
        var values = rule.value.split(' ')

        for(var i = 0; i < values.length; i++) {
            var v = values[i];
            v = v.trim()
            if (v.indexOf('(') != -1) {
                matched = self._startsWithZero(v.split('(')[1])
            } else {
                matched = self._startsWithZero(v)
            }
            if (!matched)
                continue

            for(var j = 0; j < matched.length; j++) {
                var m = matched[j]
                if (m != '0s' && m != '0ms') {
                    return false;
                }
            }
        }

        return true 
    }

    this.fix = function(self, rule, config) {
        if (rule.name == 'expression')
            return

        var fixed = rule.fixedValue
        rule.fixedValue = rule.fixedValue.replace(/,/g, ', ');

        var collector = []
        rule.fixedValue.split(' ').forEach(function(v) {
            v = v.trim()
            if (v.indexOf('(') != -1) {
                matched = self._startsWithZero(v.split('(')[1])
            } else {
                matched = self._startsWithZero(v)
            }

            if (!matched) {
                collector.push(v)
                return
            }

            var finalV = v;
            for(var j = 0; j < matched.length; j++) {
                var m = matched[j]
                if (m != '0s' && m != '0ms') {
                    finalV = finalV.replace(m, '0')
                }
            }

            collector.push(finalV)
        })

        rule.fixedValue = collector.join(' ').replace(replacer_unit, ', ')
    }

    this._startsWithZero = function(self, value) {
        var matched = value.match(pattern_unit)
        return matched
    }

    this.__doc__ = {
        "summary":"删除0后面的单位",
        "desc":"0后面的单位可以删除，以实现更好的压缩。比如 <code>0px ==> 0</code> ，<code>0em ==> 0</code> 等，\
            但是<code>transition: 0s</code>的<code>s</code>不能省略"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1NoZeroBeforeDot', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDNoZeroBeforeDot = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'no-zero-before-dot'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'zero should be removed when meet 0.xxx in "${selector}"'
    }

    this.check = function(self, rule, config) {
        var value = rule.value

        if (self._startsWithZeroDot(value))
            return false

        var values = rule.value.split(' ')
        for(var i = 0; i < values.length; i++) {
            var v = values[i]
            if (self._startsWithZeroDot(v.trim()))
                return false
        }

        return true 
    }

    this.fix = function(self, rule, config) {
        var fixedValue = rule.fixedValue
        fixedValue.split(' ').forEach(function(v) {
            if (self._startsWithZeroDot(v))
                rule.fixedValue = rule.fixedValue.replace(v, v.slice(1))
        })
    }

    this._startsWithZeroDot = function(self, value) {
        return value.indexOf('0.') == 0
    }

    this.__doc__ = {
        "summary":"删除0.x前面的0",
        "desc":" 0.xxx 前面的 0 是可以删除的，以实现更好的压缩。例如<br>\
            <code>0.3px ==> .3px</code><br><br>\
            <code>rgba(0,0,0,0.3)<code><br>\
            <code>==></code><br>\
            <code>rgba(0,0,0,.3)</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ReplaceBorderZeroWithBorderNone', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDReplaceBorderZeroWithBorderNone = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'no-border-zero'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_borderWidth = 'replace "border-width: 0" with "border-width: none" in "${selector}"'
        self.errorMsg_border = 'replace "border: 0" with "border: none" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        if (rule.name == 'border' && rule.value == '0') {
            self.errorMsg = self.errorMsg_border
            return false
        }

        if (/border-.*width/.test(rule.name) && rule.value == '0') {
            self.errorMsg = self.errorMsg_borderWidth
            return false
        }

        return true
    }

    this.__doc__ = {
        "summary":"用border:none替换border:0",
        "desc":"<code>border:0</code> 实际上是有border的，只不过宽度为0， 而 <code>border:none;</code>\
            是根本没有border的，对于浏览器来说后者的效率高，但是要注意，后者的代码长度稍微长一些。"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1SafeUrlInValue', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDSafeUrlInValue = new Class(RuleChecker, function() {

    this.__init__ = function(self) {
        self.id = 'safe-url-in-value'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg_rough = 'unsafe "%s" value in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        var name = rule.name
        if (!helper.canContainUrl(name)) {
            return true
        }
        var value = rule.value
        if (value.indexOf('.js') != -1) {
            self.errorMsg = self.errorMsg_rough.replace('%s', name)
            return false
        }
        return true
    }

    this.__doc__ = {
        "summary": "不安全的取值",
        "desc": "检查不安全的取值，避免自定义脚本随意运行，比如： <code>background-image: url(http://a.com/b.js);</code> 等"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1SemicolonAfterValue', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDSemicolonAfterValue = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'add-semicolon'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'each rule in "${selector}" need semicolon in the end, "${name}" has not'
    }

    this.check = function(self, rule, config) {
        if (!(rule.roughValue.trim().slice(-1) == ';'))
            return false
        return true 
    }

    this.__doc__ = {
        "summary":"为每一个属性后添加分号",
        "desc":"按照CSS编码规范，每一个规则后面都必须加上分号 <code>;</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ShorterColors', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDShorterColors = new Class(RuleChecker, function() {

    this.__init__ = function(self) {
        self.id = 'use-shorter-colors'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = ''
    }

    this.fix = function(self, rule, config) {
        rule.fixedValue = helper.replaceColors(rule.fixedValue)
        rule.fixedValue = helper.replaceRGB(rule.fixedValue)
    }

    this.__doc__ = {
        "summary": "用更短取值替换等价的颜色值",
        "desc": "有些颜色值是可以等价替换的，比如<code>antiquewhite: '#faebd7'</code>，后者更短"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ShorterFontWeight', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDShorterFontWeight = new Class(RuleChecker, function() {

    this.__init__ = function(self) {
        self.id = 'use-shorter-font-weight'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = ''
    }

    this.fix = function(self, rule, config) {
        if (rule.name == 'font' || rule.name == 'font-weight') {
            rule.fixedValue = helper.replaceFontWeights(rule.fixedValue)
        }
    }

    this.__doc__ = {
        "summary": "用更短的font-weight值",
        "desc": "有些颜色值是可以等价替换的，比如<code>normal: 400</code> <code>bold: 700</code>，后者更短",
        "w3c": 'http://www.w3.org/TR/CSS21/fonts.html#font-boldness'
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ShouldAddSpaceForCalc', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper')

module.exports = global.FEDShouldAddSpaceForCalc = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'add-space-for-calc'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'can not set font-family for "${selector}"'
    }

    this.check = function(self, rule, config) {
        return true
    }

    this.fix = function(self, rule, config) {
        var reg = /calc\(.*?\)/g
        var value = rule.fixedValue
        var matched = value.match(reg)
        if (matched) {
            for(var i = 0; i < matched.length; i++) {
                var c = matched[i]
                value = value.replace(c, c.replace(/\s/g, '').replace('+', ' + ').replace('-', ' - '))
            }
            rule.fixedValue = value
        }
    }

    this.__doc__ = {
        "summary":"为calc中的+/-前后加空格",
        "desc":"在某些浏览器中，不加空格将导致计算错误"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ShouldNotUseImportant', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDShouldNotUseImportant = new Class(RuleChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'do-not-use-important'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'Should not use !important in "${name}" of "${selector}"'
    }

    this.check = function(self, rule, config) {
        value = rule.value
        if (value.replace(/\s+/g, '').indexOf('!important') != -1) {
            return false
        }
        return true 
    }

    this.__doc__ = {
        "summary":"不要使用!important",
        "desc":"CSS中不要使用<code>!important</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1SingleLineSpaces', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDSingleLineSpaces = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'single-line-space'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_noSpace = 'should have one "space" before "${name}" in "${selector}"'
        self.errorMsg_spaceEnd = 'should not have "space" after "${name}" in "${selector}"'
        self.errorMsg_noSpaceBeforeValue = 'should have one "space" before value of "${name}" in "${selector}"'
        self.errorMsg_extraSpaceAfterValue = 'found extra "space" after value of "${name}" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        var singleLine = rule.getRuleSet().getSingleLineFlag()
        if (!singleLine)
            return true

        if (!(rule.roughName.indexOf(' ') == 0)) {
            self.errorMsg = self.errorMsg_noSpace
            return false
        }

        if (rule.roughName.slice(-1) == ' ') {
            self.errorMsg = self.errorMsg_spaceEnd
            return false
        }
        
        if (!(rule.roughValue.indexOf(' ') == 0)) {
            self.errorMsg = self.errorMsg_noSpaceBeforeValue
            return false
        }

        var value = rule.roughValue.trim()
        if (value.slice(-2) == ' ;' || value.slice(-1) == ' ') {
            self.errorMsg = self.errorMsg_extraSpaceAfterValue
            return false
        }
        return true 
    }

    this.__doc__ = {
        "summary":"单行的空格检查",
        "desc":"单行CSS编码风格相关的空格检查，具体内容请参见CSS编码规范"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1TransChnFontFamilyNameIntoEng', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDTransChnFontFamilyNameIntoEng = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'no-chn-font-family'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'should not use chinese font family name in "${selector}"'
    }

    this.check = function(self, rule, config) {
        if (rule.name != 'font' && rule.name != 'font-family')
            return true

        if (helper.containsChnChar(rule.value))
            return false

        return true 
    }

    this.__doc__ = {
        "summary":"字体设置时使用英文",
        "desc":"有的字体设置可以通过中文和英文两者方式来声明，比如<br>\
            <code>微软雅黑</code> 和 <code>Microsoft Yahei</code> ，我们推荐用英文的方式来实现"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1UnknownCssNameChecker', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDUnknownCssNameChecker = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'unknown-css-prop'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'unknown attribute name "${name}" found in "${selector}"'
    }

    this.check = function(self, rule, config) {
        return helper.isCssProp(rule.name.toLowerCase())
    }

    this.__doc__ = {
        "summary":"错误的css属性",
        "desc":"本工具会帮您查找错误的CSS属性，如果写错了，即可收到错误提示"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1UseLowerCaseProp', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDUseLowerCaseProp = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'lowercase-prop'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_name = '"${name}" should use lower case, in "${selector}"'
        self.errorMsg_value = 'value of "${name}" should use lower case, in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        var value = rule.value
        var name = rule.strippedName

        // give it to FED16ColorShouldUpper.py
        if (name == 'color')
            return true

        if (value.indexOf('expression') != -1)
            return true

        if (name.toLowerCase() != name) {
            self.errorMsg = self.errorMsg_name
            return false
        }

        if (value.indexOf('#') != -1)
            return true

        if (name != 'font' && name != 'font-family' && value != value.toLowerCase() && value.indexOf('#') == -1) {
            self.errorMsg = self.errorMsg_value
            return false
        }

        if (name == 'font-family')
            return true

        if (name == 'font') {
            if (value.indexOf(',') != -1) {
                // font: italic bold 12px/30px 'Courier New', Georgia, serif;
                var other = value.split(',')[0].split('"')[0].split("'")[0].split(' ').slice(0, -1).join(' ');
                if (other != other.toLowerCase()) {
                    self.errorMsg = self.errorMsg_value
                    return false
                }
            }
            return true
        }

        if (value.toLowerCase() != value) {
            self.errorMsg = self.errorMsg_value
            return false
        }

        return true 
    }

    this.fix = function(self, rule, config) {
        return;
    }

    this.__doc__ = {
        "summary":"属性名称应该用小写",
        "desc":"所有的CSS属性名称一律小写，例如 <code>width</code> ，大写的方式是不正确的，\
            例如： <code>WIDTH:100px;</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1UseSingleQuotation', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDUseSingleQuotation = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'single-quotation'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'replace " with \' in "${selector}"'
    }

    this.check = function(self, rule, config) {
        if (self._findDouble(rule.value))
            return false

        return true
    }

    this.fix = function(self, rule, config) {
        if (self._findDouble(rule.value))
            rule.fixedValue = rule.fixedValue.replace(/"/g, "'")
    }

    this._findDouble = function(self, value) {
        return value.indexOf('"') != -1
    }

    this.__doc__ = {
        "summary":"使用单引号",
        "desc":"CSS的属性取值一律使用单引号<code>'</code>， 不允许使用双引号"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1UseValidValues', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDUseValidValues = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'valid-values'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg_rough = '%s in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, rule, config) {
        return true
    }

    this.__doc__ = {
        "summary":"不正确的属性取值",
        "desc":"检查不正确的属性取值，比如： <code>width: underline;</code> 等"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED1ZIndexShouldInRange', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleChecker = base.RuleChecker
var helper = require('./helper');

module.exports = global.FEDZIndexShouldInRange = new Class(RuleChecker, function() {
    this.__init__ = function(self) {
        self.id = 'z-index-in-range'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'value of "z-index" is not correct in "${selector}"'
    }

    this.check = function(self, rule, config) {
        if (rule.name != 'z-index')
            return true

        var zIndex = parseInt(rule.value, 10);

        if (zIndex < -1 || zIndex > 2100)
            return false

        return true 
    }

    this.__doc__ = {
        "summary":"z-index取值应符合范围要求",
        "desc":"<code>z-index</code> 的取值如果混乱，则会造成层之间的相互覆盖，\
            因此 <code>z-index</code> 取值必须符合一定的范围要求，具体要求请参见人人FED CSS编码规范"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2CombineInToOne', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper')
var combiner = require('./combiners/CombinerFactory')
var combineHelper = require('./combiners/helper');

module.exports = global.FEDCombineInToOne = new Class(RuleSetChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'combine-into-one'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_rough = 'should combine "%s" to "%s" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, ruleSet, config) {
        var rules = ruleSet.getRules()
        var counter = self._countCanBeCombined(rules)
        for(var name in counter) {
            var value = counter[name];
            if (name == 'font' && helper.len(value) > 2 || name != 'font' && helper.len(value) > 1) {
                self.errorMsg = self.errorMsg_rough.replace('%s', value.join(',')).replace('%s', name)
                return false
            }
        }
        return true 
    }

    this.fix = function(self, ruleSet, config) {
        var rules = ruleSet.getRules()
        var counter = self._countCanBeCombined(rules, true)
        var rules = self._combineAttrs(rules, counter)
        ruleSet.setRules(rules)
    }

    // TODO should use nested loop
    this._countCanBeCombined = function(self, rules, forFix) {
        var counter = {}
        rules.forEach(function(rule) {
            var name = rule.name
            if (rule.fixedValue.indexOf('!important') != -1) {
                return
            }
            // do not do any hack combine
            if (helper.containsHack(rule)) {
                // must not be css3 props
                var bigger = combineHelper.canBeCombined(name)
                if (bigger && counter[bigger]) {
                    counter[bigger].stop = 1
                }
                return
            }
            // if (helper.getCss3PrefixValue(rule.strippedName) != 0)
            //     return

            var bigger;
            var css3 = helper.getCss3PrefixValue(rule.strippedName)
            if (css3 != 0) {
                bigger = combineHelper.canBeCombined(rule.strippedName)
            } else {
                bigger = combineHelper.canBeCombined(name)
            }
            
            var finalName = css3 ? rule.fixedName : name;
            if (bigger) {
                if (bigger in counter) {
                    if (counter[bigger].stop) {
                        return
                    }
                    if (forFix) {
                        counter[bigger].push([finalName, rule.fixedName, rule.fixedValue])
                    } else {
                        counter[bigger].push(finalName)
                    }
                } else {
                    if (forFix) {
                        counter[bigger] = [[finalName, rule.fixedName, rule.fixedValue]]
                    } else {
                        counter[bigger] = [finalName]
                    }
                }
            }
        })
        return counter
    }

    this._combineAttrs = function(self, rules, counter) {
        var originRules = rules
        for(var name in counter) {
            var value = counter[name]
            var tmp = combiner.doCombine(name, value)
            var combined = tmp[0]
            var deleted = tmp[1]
            var hasFather = tmp[2]
            if (!combined)
                continue

            var newRules = []
            originRules.forEach(function(rule) {
                if (helper.containsHack(rule)) {
                    newRules.push(rule)
                    return
                }
                // it is what i want
                if (rule.fixedName == name) {
                    rule.fixedValue = combined
                    newRules.push(rule)
                    return
                }
                // it is what i want to delete
                if (deleted.indexOf(rule.fixedName) != -1) {
                    if (!hasFather) {
                        rule.reset(name, combined)
                        newRules.push(rule)
                        hasFather = true
                    }
                    return
                }
                newRules.push(rule)
            })
            originRules = newRules
        }
        return originRules
    }

    this.__doc__ = {
        "summary":"将多个子样式合并",
        "desc":"有的子样式可以合并为总样式，包括\
            <code>margin</code> <code>padding</code> <code>font</code> <code>background</code> <code>border</code>\
            等，合并以后可以获得更好的执行效率和压缩效果，<br/>\
            例如：<br/>\
            <code>.test {margin:4px; margin-right:0;}</code><br/>\
            <code>==></code><br/>\
            <code>.test{margin:4px 0 4px 4px}</code><br/>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2CommentLengthLessThan80', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper')

module.exports = global.FEDCommentLengthLessThan80 = new Class(RuleSetChecker, function () {
    this.__init__ = function (self) {
        self.id = 'comment-length';
        self.errorLevel = ERROR_LEVEL.LOG;
        self.errorMsg = 'comment for "${selector}" length should less than 80 per line';
    }

    this.check = function (self, ruleSet, config) {
        var comment = ruleSet.roughComment;
        if (comment.length == 0) {
            return true
        }

        var splittedComment = comment.split('\n');
        for (var i = 0, l = splittedComment.length; i < l; i++) {
            if (helper.countStrLen(splittedComment[i].trim()) > 80) {
                return false
            }
        }
        return true
    }

    this.__doc__ = {
        "summary" : "注释不能超过80个字符",
        "desc" : "注释长度不能超过80个字符，40个汉字，如果超出，则应该要换行~"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2DistinguishBrowserRuleSet', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');
var Browser = require('../browsers/Detector').Browser

module.exports = global.FEDDistinguishBrowserRuleSet = new Class(RuleSetChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'ruleset-for-browsers'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        return true
    }

    this.fix = function(self, ruleSet, config) {
        Browser.handleRuleSet(ruleSet)
    }

    this.__doc__ = {
        "summary":"在规则集级别区分浏览器",
        "desc":"目的是针对不同的浏览器，生成不同的CSS规则集"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2DoNotSetStyleForSimpleSelector', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');

module.exports = global.FEDDoNotSetStyleForSimpleSelector = new Class(RuleSetChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'no-style-for-simple-selector';
        self.errorLevel = ERROR_LEVEL.ERROR;
        self.errorMsg_rough = 'should not set style for "%s" in "${selector}"';
        self.errorMsg = '';
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.selector.toLowerCase();
        if (selector.indexOf('@media') != -1)
            return true;

        if (selector.indexOf('@-moz-document') != -1)
            return true;

        var selectors = selector.split(',');
        for (var i = 0, l = selectors.length; i < l; i++) {
            var s = selectors[i].trim();
            if (helper.isSimpleSelector(s)) {
                self.errorMsg = self.errorMsg_rough.replace('%s', s);
                return false
            }
        }

        return true
    }

    this.__doc__ = {
        "summary" : "不要为简单选择器设置样式",
        "desc" : "一些简单的选择器，比如：<br> <code>.nav/.list/.content</code><br>非常容易造成属性的相互覆盖，因此在写这样的选择器时，最好加上前缀，比如<br><code>.module-name .nav</code><br><br>工具现有的简单选择器判断，请参考：<br><code>plugins/helper.js</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2DoNotSetStyleForTagOnly', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');

module.exports = global.FEDDoNotSetStyleForTagOnly = new Class(RuleSetChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'no-style-for-tag';
        self.errorLevel = ERROR_LEVEL.ERROR;
        self.errorMsg = 'should not set style for html tag in "${selector}"';
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.selector.toLowerCase();
        if (selector.indexOf('@media') != -1)
            return true;

        if (selector.indexOf('@-moz-document') != -1)
            return true;

        var selectors = selector.split(',');
        for (var i = 0, l = selectors.length; i < l; i++) {
            var s = selectors[i].trim();
            if (helper.isHTMLTag(s)) 
                return false
        }

        return true
    }

    this.__doc__ = {
        "summary":"不要为html tag设置样式",
        "desc":"除了重置 CSS(如Reset.css) 的相关设置，其他代码一律不允许为html tag设置样式。"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2HighPerformanceSelector', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');

module.exports = global.FEDHighPerformanceSelector = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'high-perf-selector'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg_shorter = 'please shorter the selector "${selector}"'
        self.errorMsg_no1 = 'do not use low performance selector ">" in "${selector}"'
        self.errorMsg_lessTag = 'use less tag in "${selector}"'
        self.errorMsg_id = 'should not put "HTMLtag" and "#id" together in "${selector}"'
        self.errorMsg_class = 'should not put "HTMLtag" and ".class" together in "${selector}"'
        self.errorMsg_reg = 'should not use ~=,^=,|=,$=,*= in selector of "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        var selectors = ruleSet.selector.replace(/\s\s/g, '').split(',')
        for(var i = 0; i < selectors.length; i++) {
            var s = selectors[i];
            if (s.indexOf('@media') != -1)
                continue

            if (s.indexOf('=') != -1) {
                if (s.indexOf('~=') != -1 || 
                    s.indexOf('^=') != -1 || 
                    s.indexOf('|=') != -1 || 
                    s.indexOf('$=') != -1 || 
                    s.indexOf('*=') != -1) {
                    self.errorMsg = self.errorMsg_reg
                    return false
                }
            }

            var splited = s.split(' ')
            if (helper.len(splited) > 5) {
                self.errorMsg = self.errorMsg_shorter
                return false
            }
            var counter = 0
            for(var j = 0; j < splited.length; j++) {
                var p = splited[j];
                if (p == '>') {
                    self.errorMsg = self.errorMsg_no1
                    return false
                }

                var innerSplit = p.split('#')
                if (helper.len(innerSplit) == 2 && helper.isHTMLTag(innerSplit[0])) {
                    self.errorMsg = self.errorMsg_id
                    return false
                }

                var innerSplit = p.split('.')
                if (helper.len(innerSplit) == 2 && helper.isHTMLTag(innerSplit[0])) {
                    self.errorMsg = self.errorMsg_class
                    return false
                }

                if (helper.isHTMLTag(p)) 
                    counter = counter + 1
            }
            if (counter > 1) {
                self.errorMsg = self.errorMsg_lessTag
                return false
            }
        }

        var noSpace = ruleSet.selector.replace(/\s/g, '')
        if (noSpace.indexOf('ulli') != -1 || 
            noSpace.indexOf('olli') != -1 || 
            noSpace.indexOf('dldt') != -1 || 
            noSpace.indexOf('dldd') != -1) {
            self.errorMsg = self.errorMsg_lessTag
            return false
        }
        return true
    }

    this.__doc__ = {
        "summary":"针对低性能的选择器的检查",
        "desc":"低性能选择器，害人害己还集体，本工具收集了一些低性能选择器的情形，具体请参见：<br>\
            <code>FEDHighPerformanceSelector.py</code>中的相关内容"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2MultiLineBraces', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');

module.exports = global.FEDMultiLineBraces = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'multi-line-brace'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_shouldEnterAfterOpenningBrace = 'should "enter" after the opening brace in "${selector}"'
        self.errorMsg_shouldEnterBeforeClosingBrace = 'should "enter" before the closing brace in "${selector}"'
        self.errorMsg_extraSpaceAfterOpeningBrace = 'extra "space" after the opening brace in "${selector}"'
        self.errorMsg_everyAttrShouldInSingleLine = 'every name/value should in single line in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        var singleLine = ruleSet.getSingleLineFlag()
        if (singleLine)
            return true

        var value = ruleSet.roughValue
        var splited = value.split('\n')
        if (splited[0].trim() != '') {
            self.errorMsg = self.errorMsg_shouldEnterAfterOpenningBrace
            return false
        }

        if (splited[0].trim() == '' && helper.startswith(splited[0], ' ')) {
            self.errorMsg = self.errorMsg_extraSpaceAfterOpeningBrace
            return false
        }

        var ruleLength = helper.len(ruleSet.getRules())
        if (ruleLength != 0 && helper.len(value.trim().split('\n')) != ruleLength) {
            self.errorMsg = self.errorMsg_everyAttrShouldInSingleLine
            return false
        }

        if (!helper.endswith(value.replace(' ', ''), '\n')) {
            self.errorMsg = self.errorMsg_shouldEnterBeforeClosingBrace
            return false
        }

        return true 

    }

    this.__doc__ = {
        "summary":"多行CSS风格的括号检查",
        "desc":"用于检查多行风格下的 <code>{</code> 和 <code>}</code> 的编写风格，前后空格符和回车符的情况等。"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2MultiLineSelectors', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;
var helper = require('./helper');

module.exports = global.FEDMultiLineSelectors = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'multi-line-selector'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_multiSelectorBeforeSemicolon = 'should not have "space" before semicolon in "${selector}"'
        self.errorMsg_multiSelectorBeforeSemicolon = 'should not have "space" after semicolon in "${selector}"'
        self.errorMsg_shouldEnter = 'should enter in multi-selector, in "${selector}"'
        self.errorMsg_tooManyEnters = 'too many "enter"s in "${selector}"'
        self.errorMsg_startsWithSpace = 'selector should not start with "space" in "${selector}"'
        self.errorMsg_extraSpaceAfterComma = 'extra "space" after comma in "${selector}"'
        self.errorMsg_extraSpaceBeforeComma = 'extra "space" before comma in "${selector}"'
        self.errorMsg_commaInTheEnd = 'comma should at the end of selector in "${selector}"'
        self.errorMsg_shouldAddSpaceForLast = 'should add "space" for last selector of "${selector}"'
        self.errorMsg_shouldNotEnterAtTheEnd = 'should not "enter" at the end of "${selector}"'
        self.errorMsg_selectorEndsWithSpace = 'selector should end with only one space "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.roughSelector

        if (!helper.endswith(selector, ' ') || helper.endswith(selector, '  ')) {
            self.errorMsg = self.errorMsg_selectorEndsWithSpace
            return false
        }

        if (selector.indexOf(',') == -1)
            return true

        if (helper.endswith(selector.replace(/\s+/g, ''), '\n')) {
            self.errorMsg = self.errorMsg_shouldNotEnterAtTheEnd
            return false
        }

        if (selector.trim().indexOf('\n') == -1) {
            self.errorMsg = self.errorMsg_shouldEnter
            return false
        }

        var selectors = selector.split('\n')
        var length = helper.len(selectors)

        if (helper.len(selector.split(',')) != helper.len(selector.trim().split('\n'))) {
            self.errorMsg = self.errorMsg_tooManyEnters
            return false
        }

        var realSelectors = []
        selectors.forEach(function(s) {
            if (s.trim() != '')
                realSelectors.push(s)
        })

        var counter = 0
        var length = helper.len(realSelectors)
        for(var i = 0; i < realSelectors.length; i++) {
            var current = realSelectors[i];
            counter = counter + 1
            var stripped = current.trim()
            if (stripped == '')
                continue
            if (helper.startswith(current, ' ')) {
                self.errorMsg = self.errorMsg_startsWithSpace
                return false
            }
            if (helper.endswith(stripped, ' ,')) {
                self.errorMsg = self.errorMsg_extraSpaceBeforeComma
                return false
            }
            if (helper.endswith(current, ' ') && helper.endswith(stripped, ',')) {
                self.errorMsg = self.errorMsg_extraSpaceAfterComma
                return false
            }
            if (counter == length && !helper.endswith(current, ' ')) {
                self.errorMsg = self.errorMsg_shouldAddSpaceForLast
                return false
            }
            if (counter != length && stripped.indexOf(',') == -1) {
                self.errorMsg = self.errorMsg_commaInTheEnd
                return false
            }
        }
        return true 
    }

    this.__doc__ = {
        "summary":"多行CSS风格的选择器检查",
        "desc":"多行风格下，每一个选择器单独占一行，并以逗号结尾，例如：<br>\
            <code>.a,</code><br>\
            <code>.b,</code><br>\
            <code>.c {</code><br>\
            <code>&nbsp;&nbsp;&nbsp;&nbsp;width: 100px;</code><br>\
            <code>}</code>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2NoAppearanceNameInSelector', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;

var helper = require('./helper');

module.exports = global.FEDNoAppearanceNameInSelector = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-appearance-word-in-selector'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_origin = 'should not use appearance word "%s" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.selector.toLowerCase();
        
        if(selector.indexOf('@media') != -1)
            return true;
        if(selector.indexOf('@-moz-document') != -1)
            return true;

        var word = helper.existsAppearanceWords(selector);
        
        if (word !== null){
            self.errorMsg = self.errorMsg_origin.replace('%s', word)
            return false
        }

        return true
    }

    this.__doc__ ={
        "summary":"选择器中避免表现相关的词汇",
        "desc":"避免将在selector中出现 <code>.red</code> <code>.left</code> 等描述性词汇，\
            用具体的实际意义来代替，比如 <code>.error</code> <code>.sidebar</code> "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2NoCommentInValues', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;

module.exports = global.FEDNoCommentInValues = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-comment-in-value'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg = 'find css comment (/* */) in "${selector}"'
    }

    this.check = function(self, ruleSet, config) {
        if (ruleSet.roughValue.indexOf('/*') != -1 || 
            ruleSet.roughValue.indexOf('*/') != -1)
            return false
        return true 
    }
    
    this.__doc__ = {
        "summary":"不要在css属性中添加注释",
        "desc":"CSS的注释应该写在 <code>selector</code> 前面，属性中不允许添加css注释，例如：<br>\
            <code>.selector {</code><br>\
            <code>&nbsp;&nbsp;&nbsp;&nbsp;width: 100px;/*comment here*/</code><br>\
            <code>}</code>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2NoEmptyRuleSet', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var RuleSetChecker = base.RuleSetChecker;

module.exports = global.FEDNoEmptyRuleSet = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-empty-ruleset';
        self.errorLevel = ERROR_LEVEL.ERROR;
        self.errorMsg = 'empty ruleset found "${selector}"';
    }

    this.check = function (self, ruleSet, config) {
        if (ruleSet.getRules().length == 0) {
            return false
        }
        return true
    }
    
    this.fix = function (self, ruleSet, config) {
        if (ruleSet.getRules().length == 0){
            styleSheet = ruleSet.getStyleSheet();
            styleSheet.removeRuleSet(ruleSet);
        }
    }

    this.__doc__ = {
        "summary" : "删除空的规则",
        "desc" : "空的CSS规则集是没有任何意义的，应该直接删除掉"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2NoSimpleNumberInSelector', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper')

var pattern = /\d+/g

module.exports = global.FEDNoSimpleNumberInSelector = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'number-in-selector'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'do not simply use 1,2,3 as selector(use v1/step1/item1), in "${selector}"'
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.selector

        if (selector.indexOf('@media') != -1)
            return true
            
        var found = selector.match(pattern)

        if (found) {
            for(var i = 0; i < found.length; i++) {
                var x = found[i]
                if (selector.indexOf('v' + x) == -1 && 
                    selector.indexOf('step' + x) == -1 && 
                    selector.indexOf('item' + x) == -1 && 
                    selector.indexOf('h' + x) == -1)
                    return false
            }
        }
        return true 
    }

    this.__doc__ = {
        "summary":"不要在选择器中使用简单数字",
        "desc":"在业务代码的css中，选择器中不要使用简单的 <code>1, 2, 3</code> 来进行命名，下面的命名方式就是错误的：<br>\
            <code>.test1</code> <code>.main1</code>，但是允许使用 <code>v1</code> <code>step1</code> <code>item1</code> \
            来代表版本、步骤、第几个元素的意思"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2NoStarInSelector', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper')

module.exports = global.FEDNoStarInSelector = new Class(RuleSetChecker, function () {

    this.__init__ = function (self) {
        self.id = 'no-star-in-selector'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'please remove low performance selector "*" from "${selector}"'
    }

    this.check = function (self, ruleSet, config) {
        var selector = ruleSet.selector;
        if (selector.indexOf('*') == -1)
            return true;

        var replaced = selector.replace(/\s/g, '');
        if (helper.startswith(replaced, '*html') || helper.startswith(replaced, '*+html'))
            return true;

        if (replaced.indexOf('*:not') != -1)
            return true;

        // give it to FEDHighPerformanceSelector.py
        if (replaced.indexOf('*=') != -1 && (replaced.split('*')).length == 2) {
            return true;
        }

        return false;

    }

    this.__doc__ = {
        "summary" : "不要在选择器中使用星号",
        "desc" : "禁止在选择器中加入<code>*</code>来选择所有元素，例如：\
            <br><br><code>*html</code> <code>*+html</code> <code>*:not</code>等几种特殊hack除外"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2RemoveDuplicatedAttr', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDRemoveDuplicatedAttr = new Class(RuleSetChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'remove-duplicated-attr'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'has more than 1 ${name} in "${selector}"'
    }

    this.check = function(self, ruleSet, config) {
        var rules = ruleSet.getRules()
        var collector = []
        rules.forEach(function(rule) {
            var info = self.ruleInfo(rule)
            if (collector.indexOf(info) != -1)
                return false
            collector.push(info)
        })
        return true
    }

    this.fix = function(self, ruleSet, config) {
        // make sure we use the last statement, so reverse and filter and reverse again
        // [a1, a2, b, c] ==> [c, b, a2, a1] ==> [c, b, a2] ==> [a2, b, c]
        var rules = ruleSet.getRules()
        rules.reverse()
        var newRules = []
        var collector = []
        rules.forEach(function(rule) {
            var info = self.ruleInfo(rule)
            if (collector.indexOf(info) == -1) {
                collector.push(info)
                newRules.push(rule)
            }
        })
        newRules = newRules.reverse()
        ruleSet.setRules(newRules)
    }

    this.ruleInfo = function(self, rule) {
        var name = rule.fixedName || rule.strippedName
        var value = rule.fixedValue || rule.strippedValue
        if (helper.canOverride(name, value)) {
            return name;
        }
        return name + ':' + value
    }

    this.__doc__ = {
        "summary":"删除重复的属性设置",
        "desc":"如果在一个规则集中，对相同的两个属性进行了赋值，而且取值相同，则可以删除前面的赋值，例如：\
            <br>\
            <code>.test {</code><br>\
            <code>&nbsp;&nbsp;&nbsp;&nbsp;width: 100px;</code><br>\
            <code>&nbsp;&nbsp;&nbsp;&nbsp;width: 100px;</code><br>\
            <code>}</code><br>\
            <code>==></code><br>\
            <code>.test {</code><br>\
            <code>&nbsp;&nbsp;&nbsp;&nbsp;width: 100px;</code><br>\
            <code>}</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2SelectorNoUnderLine', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDSelectorNoUnderLine = new Class(RuleSetChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'no-underline-in-selector'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'should not use _ in selector "${selector}"'
    }

    this.check = function(self, ruleSet, config) {
        var selector = ruleSet.selector
        if (selector.indexOf('_') != -1)
            return false
        return true
    }

    this.__doc__ = {
        "summary":"不要在选择器中使用下划线",
        "desc":"在selector中不要使用下划线 <code>_</code> ，可以使用中划线 <code>-</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2SingleLineBraces', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker

module.exports = global.FEDSingleLineBraces = new Class(RuleSetChecker, function() {
    this.__init__ = function(self) {
        self.id = 'single-line-brace'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_openingBrace = 'should have "only one space" before the opening brace in "${selector}"'
        self.errorMsg_openingBraceEnd = 'should have "only one space" after the opening brace in "${selector}"'
        self.errorMsg_closingBrace = 'should have "only one space" before the closing brace in "${selector}"'
        self.errorMsg_closingBraceEnd = 'should have "only one space" before the closing brace in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, ruleSet, config) {
        var singleLine = ruleSet.getSingleLineFlag()
        if (!singleLine)
            return true
        var selector = ruleSet.roughSelector
        if (selector.indexOf(',') == -1) {
            if (selector.slice(-2) == '  ' || selector.slice(-1) != ' ') {
                self.errorMsg = self.errorMsg_openingBrace
                return false
            }
        } else {
            return true
        }

        var value = ruleSet.roughValue
        if (value.slice(0, 1) != ' ' || value.slice(0, 2) == '  ') {
            self.errorMsg = self.errorMsg_openingBraceEnd
            return false
        }
        if (value.slice(-1) != ' ' || value.slice(-2) == '  ') {
            self.errorMsg = self.errorMsg_closingBraceEnd
            return false
        }
        return true 
    }

    this.__doc__ = {
        "summary":"单行的括号检查",
        "desc":"与单行CSS编码风格相关的括号检查"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2SingleLineSelector', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDSingleLineSelector = new Class(RuleSetChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'single-line-selector'
        self.errorLevel = ERROR_LEVEL.LOG
        self.errorMsg_noEnterInSingleSelector = 'should not "enter" at the end of "${selector}"'
        self.errorMsg_multiSelectorBeforeSemicolon = 'should not have "space" after semicolon in "${selector}"'
        self.errorMsg_shouldNotStartsWithSpace = 'should start with "space" in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, ruleSet, config) {
        var selector = ruleSet.roughSelector
        if (selector.indexOf(',') != -1)
            return true

        if (selector.replace(/^\s+/, '').indexOf('\n') != -1) {
            self.errorMsg = self.errorMsg_noEnterInSingleSelector
            return false
        }

        var splited = selector.split('\n')
        var realSelector = splited[splited.length - 1]
        
        if (realSelector.indexOf(' ') == 0) {
            self.errorMsg = self.errorMsg_shouldNotStartsWithSpace
            return false
        }

        return true 
    }

    this.__doc__ = {
        "summary":"单行的选择器检查",
        "desc":"单行的选择器检查内容，请参考多行选择器检查和人人FED CSS编码规范"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2StyleShouldInOrder', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDStyleShouldInOrder = new Class(RuleSetChecker, function() {

    this.__init__ = function(self) {
        self.id = 'keep-in-order'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_rough = '"%s" should after "%s" in "${selector}" (order: display/box/text/other/css3)'
        self.errorMsg = ''
    }

    this.check = function(self, ruleSet, config) {
        rules = ruleSet.getRules()
        if (rules.length < 2)
            return true

        var order = self._generateNameOrderMapping(rules)
        length = helper.len(order)
        for(var i = 0; i < order.length; i++) {
            if (i == length - 1)
                break
            var current = order[i]
            var nextAttr = order[i + 1]

            if (current[0] > nextAttr[0]) {
                self.errorMsg = self.errorMsg_rough.replace('%s', current[1]).replace('%s', nextAttr[1]);
                return false
            }
        }
        return true 
    }

    this.fix = function(self, ruleSet, config) {
        rules = ruleSet.getRules()
        if (rules.length < 2)
            return true

        function comp(a, b) {
            if (a[0] != b[0]) {
                return a[0] - b[0]
            }
            var a1 = a[1].fixedValue
            var b1 = b[1].fixedValue
            return helper.getCss3PrefixValue(a1) - helper.getCss3PrefixValue(b1)
        }

        var mapping = self._generateNameRuleMapping(rules)
        mapping = mapping.sort(comp)
        var sortedRules = []
        for(var i = 0; i < mapping.length; i++) {
            sortedRules.push(mapping[i][1])
        }
        ruleSet.setRules(sortedRules)
    }

    this._generateNameOrderMapping = function(self, rules) {
        var collector = [];
        rules.forEach(function(rule) {
            collector.push([helper.getAttrOrder(rule.name, rule.strippedName), rule.strippedName])
        })
        return collector;
    }

    this._generateNameRuleMapping = function(self, rules) {
        var collector = [];
        rules.forEach(function(rule) {
            collector.push([helper.getAttrOrder(rule.name, rule.strippedName), rule])
        })
        return collector;
    }


    this.__doc__ = {
        "summary":"属性应该按照推荐的顺序编写",
        "desc":"相同的CSS属性，如果按照推荐的顺序来编写，浏览器的处理性能会更高，推荐的顺序一般为：<br>\
            显示属性 => 盒模型属性 => 背景/行高 => 文本属性 => 其他"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2UnknownHTMLTagName', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDUnknownHTMLTagName = new Class(RuleSetChecker, function() {
    this.__init__ = function(self) {
        self.id = 'unknown-html-tag'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg_rough = 'unknown html tag "%s" found in "${selector}"'
        self.errorMsg = ''
    }

    this.check = function(self, ruleSet, config) {
        var selector = ruleSet.selector.toLowerCase()
        if (selector.indexOf('@media') != -1)
            return true
        if (selector.indexOf('@-moz-document') != -1)
            return true
        var selectors = selector.split(',')
        for(var i = 0; i < selectors.length; i++) {
            var s = selectors[i];
            var splited = s.split(' ');
            for(var j = 0; j < splited.length; j++) {
                var r = splited[j];
                r = r.trim()
                if (!r) {
                    continue;
                }
                if (r.indexOf('::') != -1) {
                    // p::selection
                    tag = r.split('::')[0].split('.')[0].split('#')[0].trim()
                } else {
                    // abcd:hover
                    // abcd.class-name:hover
                    // abcd#class-name:hover
                    tag = r.split(':')[0].split('.')[0].split('#')[0].trim()
                }
                // .test > .inner
                if (tag == '' || tag == '>' || tag == '*' || tag == '+')
                    continue

                // #id
                if (tag.indexOf('#') != -1)
                    continue

                // input[type=button]
                if (tag.indexOf('[') != -1)
                    tag = tag.split('[')[0].trim()

                // *+html
                if (tag.indexOf('*+') == 0)
                    tag = tag.slice(2)

                // *html
                else if (tag.indexOf('*') == 0)
                    tag = tag.slice(1)
                
                if (!helper.isHTMLTag(tag)) {
                    self.errorMsg = self.errorMsg_rough.replace('%s', tag)
                    return false
                }
            }
        }
        return true 
    }

    this.fix = function(self, ruleSet, config) {
        return;
    }

    this.__doc__ = {
        "summary":"错误的HTML Tag",
        "desc":"如果您输入了错误的HTML Tag，本工具也会给出相应的提示"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED2UseLowerCaseSelector', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var RuleSetChecker = base.RuleSetChecker
var helper = require('./helper');

module.exports = global.FEDUseLowerCaseSelector = new Class(RuleSetChecker, function() {
    this.__init__ = function(self) {
        self.id = 'lowercase-selector'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg = 'selector should use lower case, in "${selector}"'
    }

    this.check = function(self, ruleSet, config) {
        var selector = ruleSet.selector
        if (selector.toLowerCase() != selector)
            return false

        return true 
    }

    this.fix = function(self, ruleSet, config) {
        return;
    }

    this.__doc__ = {
        "summary":"选择器用小写字母",
        "desc":"选择器应该用小写字母， 例如 <code>.demo</code> ， 不允许使用大写，例如： <code>.Demo .Test</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED3CombineSameRuleSets', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var StyleSheetChecker = base.StyleSheetChecker
var helper = require('./helper')

var BinaryRule = require('../browsers/BinaryRule')
var ALL = BinaryRule.ALL
var STD = BinaryRule.STD

var doRuleSetDetect = require('../browsers/Hacks').doRuleSetDetect

module.exports = global.FEDCombineSameRuleSets = new Class(StyleSheetChecker, function() {
    
    this.__init__ = function(self) {
        this.notSafe = true
        self.id = 'combine-same-rulesets'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_empty = '"%s" contains the same rules in "${file}"'
        self.errorMsg = ''
    }

    // can be checked correctly only after reorder/fix/compress, so do not check
    this.check = function(self, styleSheet, config) {
        var ruleSets = styleSheet.getRuleSets()
        var mapping = self._gen_hash(ruleSets, ALL)
        var length = helper.len(mapping)

        var errors = {}
        for(var i = 0; i < length; i++) {
            for(var j = i + 1; j < length; j++) {
                if (mapping[i][1] == mapping[j][1]) {
                    var cssText = mapping[i][1]
                    if (!(cssText in errors)) {
                        errors[cssText] = []
                        errors[cssText].push(mapping[i][0])
                        errors[cssText].push(mapping[j][0])
                    } else if (errors[cssText].indexOf(mapping[j][0]) == -1) {
                        errors[cssText].push(mapping[j][0])
                    }
                    //errors.append(self.errorMsg_empty % (mapping[i][0], mapping[j][0]))
                }
            }
        }
        if (helper.len(Object.keys(errors)) == 0)
            return true
        var msgs = [];
        for(var prop in errors) {
            var x = errors[prop];
            msgs.push(self.errorMsg_empty.replace('%s', x.join(', ')))
        }
        return msgs 
    }

    this.fix = function(self, styleSheet, config) {
        var browser = config._inner.curBrowser ? config._inner.curBrowser : ALL
        var ruleSets = styleSheet.getRuleSets()
        var mapping = self._gen_hash(ruleSets, browser)

        var length = helper.len(mapping)

        var splitedSelectors = []
        for (var i = 0; i < length; i++) {
            var splited = mapping[i][0].split(',');
            splited.forEach(function(x) {
                x = x.trim();
                if (x != '') {
                    splitedSelectors.push(x);
                }
            })
        }

        for (var i = 0; i < length; i++) {          
            if (mapping[i][0] == 'extra')
                continue
            var selectorHistory = []

            for (var j = i + 1; j < length; j++) {
                if (mapping[i][1] != mapping[j][1]) {
                    selectorHistory = selectorHistory.concat(splitedSelectors[j])
                    continue
                }

                // 合并则遵循如下策略：
                // 1、两者必须都与当前要求的浏览器兼容，即 browserI & browser != 0 and browserJ & browser != 0
                // 2、两者的浏览器兼容性必须完全一致，即 browserI ^ browserJ == 0
                // 第二点主要是因为有的属性合并以后，由于兼容性不同，受不兼容的selector影响，使本应该兼容的selector失效。
                var browserI = doRuleSetDetect(mapping[i][0])
                var browserJ = doRuleSetDetect(mapping[j][0])
                // mapping.debug && console.log(mapping[i][0], mapping[j][0], browserI, browserJ)
                if (!((browserI & browser) != 0 && (browserJ & browser) != 0 && (browserI ^ browserJ) == 0))
                    continue

                // bakcground-position is dangerous, position设置必须在background-image之后
                if (mapping[j][1].indexOf('background-position') != -1) {
                    selectorHistory = selectorHistory.concat(splitedSelectors[j])
                    continue
                }

                var hasFlag = false
                // ".a {width:0} .a, .b{width:1}, .b{width:0}" 不应该被合并成 ".a, .b{width:0} .a, .b{width:1}"
                // 但是目前还有一个最严重的问题：
                // .c {width:1}, .d{width:0}, .b{width:1}, .a{width:0}
                // class="a c" => width 0
                // class="b d" => width 1
                // 一旦合并成 .b,.c{width:1} .d,.a{width:0} （不论往前合并还是往后合并，都是这个结果，囧）
                // class="a c" => width 0
                // class="b d" => width 0(本来为1)
                // 这是无法解决的问题，因为我不能在没有分析DOM的情况下，确定两个selector指向同一个dom
                // 为此，安全模式 --safe 诞生。
                for(var k = 0; k < splitedSelectors[j].length; k++) {
                    var x = splitedSelectors[j][k];
                    if (selectorHistory.indexOf(x) != -1) {
                        hasFlag = true;
                        break;
                    }
                }
                if (hasFlag) {
                    selectorHistory = selectorHistory.concat(splitedSelectors[j])
                    continue
                }

                // make it different
                mapping[j][1] = helper.str(i) + helper.str(j)
                mapping[j][0] = 'extra'

                // extend target selector
                var target = styleSheet.getRuleSets()[i]
                var src = styleSheet.getRuleSets()[j]
                target.extendSelector(src)

                // remove rule set
                styleSheet.removeRuleSetByIndex(j)
                selectorHistory = selectorHistory.concat(splitedSelectors[j])
            }
        }
        // remember to clean after remove ruleset
        styleSheet.clean()
    }

    this._gen_hash = function(self, ruleSets, browser) {
        var mapping = []
        var counter = 0
        //var flag = false;
        ruleSets.forEach(function(r) {
            if (r.extra) {// or doRuleSetDetect(r.selector) != STD:
                // make it impossible to equal
                mapping.push(['extra', "do_not_combine_" + helper.str(counter)])
                counter = counter + 1
                return
            }
            //flag = r.compressRules(browser).indexOf('width:300px;-moz-transform:1s') != -1;
            mapping.push([r.selector, r.compressRules(browser)])
        });
        // if (flag) {
        //     console.log(mapping)
        // }
        // mapping.debug = flag;
        return mapping
    }

    this.__doc__ = {
        "summary":"合并两个完全相同的规则集",
        "desc":"如果两个规则集完全一样，则可以进行合并。<br>\
            需要指出的是：合并可能会带来功能上的问题。如果有问题，还请告知 wangjeaf@gmail.com~<br>\
            例如：<br>\
            <code>.a {width:100px}</code><br>\
            <code>.b {width:100px}</code><br>\
            <code>==></code><br>\
            <code>.a, .b {width:100px}</code><br>\
            <br>\
            <strong>安全模式下将不执行此规则</strong><br>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED3CombineSameSelector', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var StyleSheetChecker = base.StyleSheetChecker
var helper = require('./helper')

var BinaryRule = require('../browsers/BinaryRule')
var ALL = BinaryRule.ALL
var STD = BinaryRule.STD

var doRuleSetDetect = require('../browsers/Hacks').doRuleSetDetect

module.exports = global.FEDCombineSameSelector = new Class(StyleSheetChecker, function() {
    
    this.__init__ = function(self) {
        self.id = 'combine-same-selector'
        self.errorLevel = ERROR_LEVEL.WARNING
        self.errorMsg_empty = '"%s" contains the same selector in "${file}"'
        self.errorMsg = ''
    }

    this.check = function(self, styleSheet, config) {
        return true
    }

    this.fix = function(self, styleSheet, config) {
        var ruleSets = styleSheet.getRuleSets()
        var mapper = {}
        var counter = 0
        ruleSets.forEach(function(ruleset) {
            if (ruleset.extra) {
                return
            }
            var fixedSelector = ruleset.fixedSelector
            mapper[fixedSelector] = mapper[fixedSelector] || []
            mapper[fixedSelector].push({
                counter: counter++,
                ruleset: ruleset
            });
        })

        for(var prop in mapper) {
            var sameSelectorRuleSets = mapper[prop]
            if (sameSelectorRuleSets.length > 1) {
                self._combine(styleSheet, sameSelectorRuleSets, config)
            }
        }
    }

    this._combine = function(self, styleSheet, rulesets, config) {
        if (!config.safe) {
            var first = rulesets[0].ruleset;
            for(var i = 1; i < rulesets.length; i++) {
                first.extendRules(rulesets[i].ruleset)
                styleSheet.removeRuleSet(rulesets[i].ruleset)
            }
        } else {
            var i = 0;
            while(i < rulesets.length - 1) {
                var a = rulesets[i];
                var delta = 1;
                for(var j = i + 1; j < rulesets.length; j++) {
                    if (rulesets[j].counter - a.counter == delta) {
                        i ++;
                        delta ++;
                        a.ruleset.extendRules(rulesets[j].ruleset)
                        styleSheet.removeRuleSet(rulesets[j].ruleset)
                    }
                }
                i ++
            }
        }
    }

    this.__doc__ = {
        "summary":"合并两个相同的selector",
        "desc":"两个selector一样，属性不一样的，可以尝试合并<br>\
            需要指出的是：合并可能会带来功能上的问题。如果有问题，还请告知 wangjeaf@gmail.com~<br>\
            例如：<br>\
            <code>.a {width:100px}</code><br>\
            <code>.a {height:200px}</code><br>\
            <code>==></code><br>\
            <code>.a {width:100px; height: 200px;}</code><br>\
            <br>\
        "
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED3MustContainAuthorInfo', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var StyleSheetChecker = base.StyleSheetChecker

module.exports = global.FEDMustContainAuthorInfo = new Class(StyleSheetChecker, function() {
    this.__init__ = function(self) {
        self.id = 'add-author'
        self.errorMsg_author = 'should add @author in the head of "${file}"'
        self.errorMsg_empty = 'empty css file "${file}"'
        self.errorMsg = ''
        self.errorLevel = ERROR_LEVEL.ERROR
    }

    this.check = function(self, styleSheet, config) {
        ruleSets = styleSheet.getRuleSets()
        if (ruleSets.length == 0) {
            self.errorMsg = self.errorMsg_empty
            return false
        }

        first = ruleSets[0]

        if (styleSheet.getFile() != '' 
            && first.comment.indexOf('@author') == -1 
            && first.comment.indexOf('@alibaba') == -1 
            && first.comment.indexOf('@taobao') == -1 
            && first.comment.indexOf('@renren-inc.com') == -1) {
            self.errorMsg = self.errorMsg_author
            return false
        }
        return true 
    }

    this.__doc__ = {
        "summary":"需要在文件中添加作者信息",
        "desc":"需要在文件中添加作者的信息，本工具认可的作者信息是在文件顶部的注释中添加 <code>@author:xxx</code>"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED4DistinguishBrowserExtra', function(require, exports, module) {

var base = require('../base');
var ERROR_LEVEL = base.ERROR_LEVEL;
var Class = base.Class;
var ExtraChecker = base.ExtraChecker;
var helper = require('./helper');
var Browser = require('../browsers/Detector').Browser

module.exports = global.FEDDistinguishBrowserExtra = new Class(ExtraChecker, function () {
    
    this.__init__ = function (self) {
        self.id = 'extra-for-browsers'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = ''
    }

    this.check = function (self, ruleSet, config) {
        return true
    }

    this.fix = function(self, ruleSet, config) {
        if (!ruleSet.nested)
            return
        Browser.handleNestedStatement(ruleSet)
    }

    this.__doc__ = {
        "summary":"嵌套规则区分浏览器",
        "desc":"目的是针对不同的浏览器，生成不同的CSS规则集"
    }
})

})
// auto generated by concat 
;define('ckstyle/plugins/FED4FixNestedStatement', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var ExtraChecker = base.ExtraChecker
var helper = require('./helper');

module.exports = global.FEDFixNestedStatement = new Class(ExtraChecker, function() {

    this.__init__ = function(self) {
        self.id = 'fix-nested-ruleset'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = ''
        self._private = true
    }

    this.check = function(self, ruleSet, config) {
        return true 
    }

    this.fix = function(self, ruleSet, config) {
        if (!ruleSet.nested)
            return

        ruleSet.fixedSelector = ruleSet.fixedSelector.replace(/"/g, '\'')
        
        var modulePath = '../doCssFix';
        var compressModulePath = '../doCssCompress'
        
        var statement = ruleSet.fixedStatement

        var doFix = require(modulePath).doFix
        var msg = doFix(statement, '', config)[1]
        ruleSet.fixedStatement = msg

        // compress it
        var prepare = require(compressModulePath).prepare
        var checker = prepare(statement, '', config)
        // 嵌套的CSS，如果是压缩，也需要精简
        var msg = checker.doCompress(config._inner.curBrowser)
        ruleSet.compressedStatement = msg
    }

    this.__doc__ = {
        "summary":"修复嵌套的CSS",
        "desc":"@keyframes, @media之类的"
    }
});

})
// auto generated by concat 
;define('ckstyle/plugins/FED4HackRuleSetInCorrectWay', function(require, exports, module) {

var base = require('../base')
var ERROR_LEVEL = base.ERROR_LEVEL
var Class = base.Class
var ExtraChecker = base.ExtraChecker
var helper = require('./helper');

module.exports = global.FEDHackRuleSetInCorrectWay = new Class(ExtraChecker, function() {

    this.__init__ = function(self) {
        self.id = 'hack-ruleset'
        self.errorLevel = ERROR_LEVEL.ERROR
        self.errorMsg = 'not correct hacking way in "${selector}"'
    }

    this.check = function(self, ruleSet, config) {
        if (!ruleSet.nested)
            return true

        var selector = ruleSet.selector.trim()
        if (selector.indexOf('@-moz-document') != -1) {
            if (selector.replace(/\s\s+/g, ' ') != '@-moz-document url-prefix()') {
                return false
            }
        }

        if (selector.indexOf('-webkit-min-device-pixel-ratio:0') != -1) {
            if (selector != '@media screen and (-webkit-min-device-pixel-ratio:0)' && 
                selector.indexOf('-webkit-min-device-pixel-ratio:10000') == -1) {
                return false
            }
        }

        if (selector.indexOf('-webkit-min-device-pixel-ratio:10000') != -1) {
            if (selector.indexOf('@media all') == -1 || 
                selector.indexOf('not all and') == -1 || 
                selector.indexOf('-webkit-min-device-pixel-ratio:0') == -1) {
                return false
            }
        }

        return true 
    }

    this.__doc__ = {
        "summary":"hack规则时的检查",
        "desc":"针对Firefox Opera Safari等浏览器的 hack 方式， <strong>人人FED CSS编码规范</strong>中有详细的描述， \
            不允许使用规定之外的方式进行规则级别的hack"
    }
});

})
// auto generated by concat 
;define('ckstyle/plugins/colors', function(require, exports, module) {

module.exports = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#0ff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000',
    blanchedalmond: '#ffebcd',
    blue: '#00f',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#0ff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgreen: '#006400',
    darkgrey: '#a9a9a9',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#f0f',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    grey: '#808080',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgreen: '#90ee90',
    lightgrey: '#d3d3d3',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#0f0',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370db',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#db7093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    rebeccapurple: '#663399',
    red: '#f00',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#fff',
    whitesmoke: '#f5f5f5',
    yellow: '#ff0',
    yellowgreen: '#9acd32'
};

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/AnimationCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

/*
.transition {
    animation-name: myfirst;
    animation-duration: 5s;
    animation-timing-function: linear;
    animation-delay: 2s;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-play-state: running;
    animation-fill-mode: none;
}

// ==> animation: myfirst 5s linear 2s infinite alternate;
*/
var AnimationCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name.trim()
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('name', value)
        } else if (length == 2) {
            this.fill('name', splited[0])
            this.fill('duration', splited[1])
        } else if (length == 3) {
            this.fill('name', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
        } else if (length == 4) {
            this.fill('name', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
            this.fill('delay', splited[3])
        } else if (length == 5) {
            this.fill('name', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
            this.fill('delay', splited[3])
            this.fill('iteration-count', splited[4])
        } else if (length == 6) {
            this.fill('name', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
            this.fill('delay', splited[3])
            this.fill('iteration-count', splited[4])
            this.fill('direction', splited[5])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return
            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0].trim()] = prop[2]
            }
        })
    }

    this.get = function(self, prop) {
        return self.collector[self.name + prop]
    }

    this.join = function(self) {
        var collector = [];
        var counter = 0;
        // console.log(self.collector)
        if (self.get('-name')) {
            counter++
            collector.push(self.get('-name'))
        }
        if (self.get('-duration')) {
            counter++
            collector.push(self.get('-duration'))
        }
        if (self.get('-timing-function')) {
            counter++
            collector.push(self.get('-timing-function'))
        }
        if (self.get('-delay')) {
            counter++
            collector.push(self.get('-delay'))
        }
        if (self.get('-iteration-count')) {
            counter++
            collector.push(self.get('-iteration-count'))
        }
        if (self.get('-direction')) {
            counter++
            collector.push(self.get('-direction'))
        }

        if (self.get('-play-state')) {
            counter++
            if (self.get('-play-state') != 'playing')
                collector.push(self.get('-play-state'))
        }

        if (self.get('-fill-mode')) {
            counter++
            if (self.get('-fill-mode') != 'none')
                collector.push(self.get('-fill-mode'))
        }

        if (counter < 3) {
            self.combined = ''
            self.deleted = []
            self.hasFather = false
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = AnimationCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/BackgroundCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

/*
.bg {
    background-color
    background-image
    background-repeat
    background-attachment
    background-position-x
    background-position-y
}
*/
var BackgroundCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name.trim()
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate2 = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 2) {
            this.fill('position-x', splited[0])
            this.fill('position-y', splited[1])
        }
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('image', value)
        } else if (length == 2) {
            this.fill('color', splited[0])
            this.fill('image', splited[1])
        } else if (length == 3) {
            this.fill('color', splited[0])
            this.fill('image', splited[1])
            this.fill('repeat', splited[2])
        } else if (length == 4) {
            this.fill('color', splited[0])
            this.fill('image', splited[1])
            this.fill('repeat', splited[2])
            this.fill('attachment', splited[3])
        } else if (length == 5) {
            this.fill('color', splited[0])
            this.fill('image', splited[1])
            this.fill('repeat', splited[2])
            this.fill('attachment', splited[3])
            this.fill('position-x', splited[4])
        } else if (length == 6) {
            this.fill('color', splited[0])
            this.fill('image', splited[1])
            this.fill('repeat', splited[2])
            this.fill('attachment', splited[3])
            this.fill('position-x', splited[4])
            this.fill('position-y', splited[5])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return
            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else if (prop[1] == 'background-position') {
                self._seperate2(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                if (prop[0].trim() == 'background-image' && prop[2].indexOf('url(') == -1) {
                    return
                }
                self.collector[prop[0].trim()] = prop[2]
            }
        })
    }

    this.get = function(self, prop) {
        return self.collector[self.name + prop]
    }

    this.join = function(self) {
        var collector = [];
        var counter = 0;
        // console.log(self.collector)
        if (self.get('-color')) {
            counter++
            collector.push(self.get('-color'))
        }
        if (self.get('-image')) {
            counter++
            collector.push(self.get('-image'))
        }
        if (self.get('-repeat')) {
            counter++
            collector.push(self.get('-repeat'))
        }
        if (self.get('-attachment')) {
            counter++
            if (self.get('-attachment') != 'scroll') 
                collector.push(self.get('-attachment'))
        }
        if (self.get('-position-x')) {
            counter++
            collector.push(self.get('-position-x'))
        }
        if (self.get('-position-y')) {
            counter++
            collector.push(self.get('-position-y'))
        }

        if (counter < 6) {
            self.combined = ''
            self.deleted = []
            self.hasFather = false
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = BackgroundCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/BorderCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

var BorderCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('width', value)
        } else if (length == 2) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
        } else if (length == 3) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
            this.fill('color', splited[2])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var collector = [];
        var hasWidth, counter = 0;
        if (self.collector[self.name + '-width']) {
            hasWidth = 1
            counter++
            collector.push(self.collector[self.name + '-width'])
        }
        if (self.collector[self.name + '-style']) {
            counter++
            collector.push(self.collector[self.name + '-style'])
        }
        if (self.collector[self.name + '-color']) {
            counter++
            collector.push(self.collector[self.name + '-color'])
        }
        if (counter <= 1 && !hasWidth) {
            self.deleted = []
            self.hasFather = false
            self.combined = ''
            return
        }
        if (counter > 1 && !hasWidth) {
            collector.unshift('medium')
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = BorderCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/BorderRadiusCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

var BorderRadiusCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
        self.hasFather = false
        self.initSubs()
    }

    this.initSubs = function(self) {
        var name = self.name
        self.collector['border-top-left-radius'] = ''
        self.collector['border-top-right-radius'] = ''
        self.collector['border-bottom-left-radius'] = ''
        self.collector['border-bottom-right-radius'] = ''
    }

    this._seperate = function(self, value) {
        var splited = value.split(' ')
        var a = b = c = d = ''
        var length = helper.len(splited)
        if (length == 1) {
            a = b = c = d = value
        } else if (length == 2) {
            a = c = splited[0].trim()
            d = b = splited[1].trim()
        } else if (length == 3) {
            a = splited[0].trim()
            d = b = splited[1].trim()
            c = splited[2].trim()
        } else if (length >= 4) {
            a = splited[0].trim()
            b = splited[1].trim()
            c = splited[2].trim()
            d = splited[3].trim()
        }
        var name = self.name
        self.collector['border-top-left-radius'] = a
        self.collector['border-top-right-radius'] = b
        self.collector['border-bottom-right-radius'] = c
        self.collector['border-bottom-left-radius'] = d
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2].trim().replace(/\s\s/g, ' ');
            }
        })
    }

    this.join = function(self) {
        var top = self.collector['border-top-left-radius']
        var right = self.collector['border-top-right-radius']
        var bottom = self.collector['border-bottom-right-radius']
        var left = self.collector['border-bottom-left-radius']
        if (left == '' || top == '' || right == '' || bottom == '') {
            self.combined = null
            self.deleted = []
            return
        }

/*

.foo4 {\
    border-top-left-radius: 2em 0.5em;\
    border-top-right-radius: 1em 3em;\
    border-bottom-right-radius: 4em 0.5em;\
    border-bottom-left-radius: 1em 3em;\
}
==> .foo4{border-radius:2em 1em 4em/.5em 3em}
*/
        var top1, top2, right1, right2, bottom1, bottom2, left1, left2;

        var tmp = top.split(' ');
        top1 = tmp[0]
        top2 = tmp[1] || tmp[0]

        var tmp = right.split(' ');
        right1 = tmp[0]
        right2 = tmp[1] || tmp[0]

        var tmp = bottom.split(' ');
        bottom1 = tmp[0]
        bottom2 = tmp[1] || tmp[0]

        var tmp = left.split(' ');
        left1 = tmp[0]
        left2 = tmp[1] || tmp[0]

        var part1 = '', part2 = ''
        if (left1 == right1 && right1 == bottom1 && bottom1 == top1) {
            part1 = left1
        } else if (left1 == right1 && bottom1 == top1) {
            part1 = top1 + ' ' + left1
        } else if (top1 != bottom1 && left1 == right1) {
            part1 = top1 + ' ' + right1 + ' ' + bottom1
        } else {
            part1 = top1 + ' ' + right1 + ' ' + bottom1 + ' ' + left1
        }

        if (left2 == right2 && right2 == bottom2 && bottom2 == top2) {
            part2 = left2
        } else if (left2 == right2 && bottom2 == top2) {
            part2 = top2 + ' ' + left2
        } else if (top2 != bottom2 && left2 == right2) {
            part2 = top2 + ' ' + right2 + ' ' + bottom2
        } else {
            part2 = top2 + ' ' + right2 + ' ' + bottom2 + ' ' + left2
        }

        self.combined = part1.trim()
        part2 = part2.trim()
        if (part2 != part1.trim()) {
            self.combined += '/' + part2
        }
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }
})

module.exports = BorderRadiusCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/Combiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class

var Combiner = new Class(function() {
    this.combine = function(self, name, attrs) {
    }
})

module.exports = Combiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/CombinerFactory', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')

var combiners = {
    margin: require('./MarginCombiner'),
    padding: require('./PaddingCombiner'),
    outline: require('./OutlineCombiner'),
    border: require('./BorderCombiner'),
    'border-top': require('./BorderCombiner'),
    'border-left': require('./BorderCombiner'),
    'border-bottom': require('./BorderCombiner'),
    'border-right': require('./BorderCombiner'),
    font: require('./FontCombiner'),
    background: require('./BackgroundCombiner'),
    'border-radius': require('./BorderRadiusCombiner'),
    'transition': require('./TransitionCombiner'),
    '-webkit-transition': require('./TransitionCombiner'),
    '-moz-transition': require('./TransitionCombiner'),
    '-o-transition': require('./TransitionCombiner'),
    'animation': require('./AnimationCombiner'),
    '-webkit-animation': require('./AnimationCombiner'),
    '-moz-animation': require('./AnimationCombiner'),
    '-o-animation': require('./AnimationCombiner'),
    'list-style': require('./ListStyleCombiner')
}

function doCombine(name, props) {
    var pluginClass = combiners[name] || NullCombiner
    var instance = new pluginClass(name, props)
    return instance.combine()
}

var NullCombiner = new Class(function() {
    this.__init__ = function(self, name, props) {}
    this.combine = function(self) {
        return [null, [], false]
    }
})

exports.doCombine = doCombine


// if (!module.parent) {
//     console.log(doCombine('margin', [
//         ['margin', 'margin', '50px auto 0 auto']
//     ]))
//     console.log(doCombine('padding', [
//         ['padding', 'padding', '50px auto 50px auto']
//     ]))
// }

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/FontCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

var FontCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('width', value)
        } else if (length == 2) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
        } else if (length == 3) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
            this.fill('color', splited[2])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var collector = [];
        var counter = 0;
        if (self.collector['font-style']) {
            counter++
            collector.push(self.collector['font-style'])
        }
        if (self.collector['font-variant']) {
            counter++
            collector.push(self.collector['font-variant'])
        }
        if (self.collector['font-weight']) {
            counter++
            collector.push(self.collector['font-weight'])
        }
        var sizeHeight = '';
        if (self.collector['font-size']) {
            sizeHeight = self.collector['font-size']
            if (self.collector['line-height']) {
                sizeHeight += '/' + self.collector['line-height']
            }
            collector.push(sizeHeight)
            counter ++
        }
        if (self.collector['font-family']) {
            counter++
            collector.push(self.collector['font-family'])
        }
        if (counter < 4) {
            self.combined = ''
            self.deleted = []
            self.hasFather = false
            return
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = FontCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/ListStyleCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

var ListStyleCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('type', value)
        } else if (length == 2) {
            this.fill('type', splited[0])
            this.fill('position', splited[1])
        } else if (length == 3) {
            this.fill('type', splited[0])
            this.fill('position', splited[1])
            this.fill('image', splited[2])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var collector = [];
        var counter = 0, hasImage;
        if (self.collector['list-style-type']) {
            counter++
            collector.push(self.collector['list-style-type'])
        }
        if (self.collector['list-style-position']) {
            counter++
            collector.push(self.collector['list-style-position'])
        }
        if (self.collector['list-style-image']) {
            counter++
            hasImage = false
            collector.push(self.collector['list-style-image'])
        }
        if (counter != 3 && !(counter == 2 && !hasImage)) {
            self.combined = ''
            self.deleted = []
            self.hasFather = false
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = ListStyleCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/MarginCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')


var MarginCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
        self.hasFather = false
        self.subs = ['left', 'top', 'bottom', 'right']
        self.initSubs()
    }

    this.initSubs = function(self) {
        var name = self.name
        self.subs.forEach(function(sub) {
            self.collector[name + '-' + sub] = ''
        })
    }

    this._seperate = function(self, value) {
        var splited = value.split(' ')
        var top = right = bottom = left = ''
        var length = helper.len(splited)
        if (length == 1) {
            top = right = bottom = left = value
        } else if (length == 2) {
            top = bottom = splited[0].trim()
            left = right = splited[1].trim()
        } else if (length == 3) {
            top = splited[0].trim()
            left = right = splited[1].trim()
            bottom = splited[2].trim()
        } else if (length >= 4) {
            top = splited[0].trim()
            right = splited[1].trim()
            bottom = splited[2].trim()
            left = splited[3].trim()
        }
        var name = self.name
        self.collector[self.name + '-top'] = top
        self.collector[self.name + '-right'] = right
        self.collector[self.name + '-bottom'] = bottom
        self.collector[self.name + '-left'] = left
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var left = self.collector[self.name + '-left']
        var top = self.collector[self.name + '-top']
        var right = self.collector[self.name + '-right']
        var bottom = self.collector[self.name + '-bottom']

        if (left == '' || top == '' || right == '' || bottom == '') {
            self.combined = null
            self.deleted = []
            return
        }

        if (left == right && right == bottom && bottom == top) {
            self.combined = left
        } else if (left == right && bottom == top) {
            self.combined = top + ' ' + left
        } else if (top != bottom && left == right) {
            self.combined = top + ' ' + right + ' ' + bottom
        } else {
            self.combined = top + ' ' + right + ' ' + bottom + ' ' + left
        }
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }
})

module.exports = MarginCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/OutlineCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

var OutlineCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('width', value)
        } else if (length == 2) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
        } else if (length == 3) {
            this.fill('width', splited[0])
            this.fill('style', splited[1])
            this.fill('color', splited[2])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var collector = [];
        var hasWidth, counter = 0;
        if (self.collector['outline-width']) {
            hasWidth = 1
            counter++
            collector.push(self.collector['outline-width'])
        }
        if (self.collector['outline-style']) {
            counter++
            collector.push(self.collector['outline-style'])
        }
        if (self.collector['outline-color']) {
            counter++
            collector.push(self.collector['outline-color'])
        }
        if (counter <= 1 && !hasWidth) {
            self.deleted = []
            self.hasFather = false
            self.combined = ''
            return
        }
        if (counter > 1 && !hasWidth) {
            collector.unshift('invert')
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = OutlineCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/PaddingCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')


var PaddingCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
        self.hasFather = false
        self.subs = ['left', 'top', 'bottom', 'right']
        self.initSubs()
    }

    this.initSubs = function(self) {
        var name = self.name
        self.subs.forEach(function(sub) {
            self.collector[name + '-' + sub] = ''
        })
    }

    this._seperate = function(self, value) {
        var splited = value.split(' ')
        var top = right = bottom = left = ''
        var length = helper.len(splited)
        if (length == 1) {
            top = right = bottom = left = value
        } else if (length == 2) {
            top = bottom = splited[0].trim()
            left = right = splited[1].trim()
        } else if (length == 3) {
            top = splited[0].trim()
            left = right = splited[1].trim()
            bottom = splited[2].trim()
        } else if (length >= 4) {
            top = splited[0].trim()
            right = splited[1].trim()
            bottom = splited[2].trim()
            left = splited[3].trim()
        }
        var name = self.name
        self.collector[self.name + '-top'] = top
        self.collector[self.name + '-right'] = right
        self.collector[self.name + '-bottom'] = bottom
        self.collector[self.name + '-left'] = left
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return

            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0]] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var left = self.collector[self.name + '-left']
        var top = self.collector[self.name + '-top']
        var right = self.collector[self.name + '-right']
        var bottom = self.collector[self.name + '-bottom']

        if (left == '' || top == '' || right == '' || bottom == '') {
            self.combined = null
            self.deleted = []
            return
        }

        if (left == right && right == bottom && bottom == top) {
            self.combined = left
        } else if (left == right && bottom == top) {
            self.combined = top + ' ' + left
        } else if (top != bottom && left == right) {
            self.combined = top + ' ' + right + ' ' + bottom
        } else {
            self.combined = top + ' ' + right + ' ' + bottom + ' ' + left
        }
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }
})

module.exports = PaddingCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/TransitionCombiner', function(require, exports, module) {

var base = require('../../base')
var Class = base.Class
var helper = require('./helper')
var Combiner = require('./Combiner')

/*
// ==> transiton: padding .36s ease -1s;

.transition {
  transition-property: padding;
  transition-duration: .36s;
  transition-timing-function: ease;
  transition-delay: -1s;
}
*/
var TransitionCombiner = new Class(Combiner, function() {

    this.__init__ = function(self, name, attrs) {
        self.name = name.trim()
        self.attrs = attrs
        self.combined = ''
        self.collector = {}
        self.deleted = []
    }

    this.fill = function(self, prop, val) {
        self.collector[self.name + '-' + prop] = val
    }

    this._seperate = function(self, value) {
        value = value.replace(/\s*,\s*/g, ',')
        var splited = value.split(' ')
        var length = helper.len(splited)
        if (length == 1) {
            this.fill('duration', value)
        } else if (length == 2) {
            this.fill('property', splited[0])
            this.fill('duration', splited[1])
        } else if (length == 3) {
            this.fill('property', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
        } else if (length == 4) {
            this.fill('property', splited[0])
            this.fill('duration', splited[1])
            this.fill('timing-function', splited[2])
            this.fill('delay', splited[3])
        }
    }

    this.collect = function(self) {
        var name = self.name
        var attrs = self.attrs
        attrs.forEach(function(prop) {
            if (helper.containsHack(prop[0], prop[1], prop[2]))
                return
            if (prop[1] == name) {
                self.hasFather = true
                self._seperate(prop[2])
            } else {
                if (!(prop[1] in self.deleted)) {
                    self.deleted.push(prop[1])
                }
                self.collector[prop[0].trim()] = prop[2]
            }
        })
    }

    this.join = function(self) {
        var collector = [];
        var counter = 0;
        // console.log(self.collector)
        if (self.collector[self.name + '-property']) {
            counter++
            collector.push(self.collector[self.name + '-property'])
        }
        if (self.collector[self.name + '-duration']) {
            counter++
            collector.push(self.collector[self.name + '-duration'])
        }
        if (self.collector[self.name + '-timing-function']) {
            counter++
            collector.push(self.collector[self.name + '-timing-function'])
        }
        if (self.collector[self.name + '-delay']) {
            counter++
            collector.push(self.collector[self.name + '-delay'])
        }
        if (counter != 2 && counter != 4) {
            self.combined = ''
            self.deleted = []
            self.hasFather = false
        }
        self.combined = collector.join(' ')
    }

    this.combine = function(self) {
        self.collect()
        self.join()
        return [self.combined, self.deleted, self.hasFather]
    }

})

module.exports = TransitionCombiner

})
// auto generated by concat 
;define('ckstyle/plugins/combiners/helper', function(require, exports, module) {

function containsHack(name, strippedName, value) {
    return value.indexOf('\\9') != -1
}

var canBeCombinedProps = {
    'border-radius': [
        'border-top-left-radius',
        'border-top-right-radius',
        'border-bottom-right-radius',
        'border-bottom-left-radius'
    ],
    'border-radius': [
        'border-top-left-radius',
        'border-top-right-radius',
        'border-bottom-right-radius',
        'border-bottom-left-radius'
    ],
    'list-style': [
        'list-style-image',
        'list-style-position',
        'list-style-type'
    ],
    'border-top': ['border-top-width', 'border-top-style', 'border-top-color'],
    'border-bottom': ['border-bottom-width', 'border-bottom-style', 'border-bottom-color'],
    'border-left': ['border-left-width', 'border-left-style', 'border-left-color'],
    'border-right': ['border-right-width', 'border-right-style', 'border-right-color'],
    
    transition: [
        'transition-property',
        'transition-duration',
        'transition-timing-function',
        'transition-delay'
    ],
    '-webkit-transition': [
        '-webkit-transition-property',
        '-webkit-transition-duration',
        '-webkit-transition-timing-function',
        '-webkit-transition-delay'
    ],
    '-moz-transition': [
        '-moz-transition-property',
        '-moz-transition-duration',
        '-moz-transition-timing-function',
        '-moz-transition-delay'
    ],
    '-o-transition': [
        '-o-transition-property',
        '-o-transition-duration',
        '-o-transition-timing-function',
        '-o-transition-delay'
    ],
    animation: [
        'animation-property',
        'animation-duration',
        'animation-timing-function',
        'animation-delay',
        'animation-iteration-count',
        'animation-direction'
    ],
    '-webkit-animation': [
        '-webkit-animation-property',
        '-webkit-animation-duration',
        '-webkit-animation-timing-function',
        '-webkit-animation-delay',
        '-webkit-animation-iteration-count',
        '-webkit-animation-direction'
    ],
    '-moz-animation': [
        '-moz-animation-property',
        '-moz-animation-duration',
        '-moz-animation-timing-function',
        '-moz-animation-delay',
        '-moz-animation-iteration-count',
        '-moz-animation-direction'
    ],
    '-o-animation': [
        '-o-animation-property',
        '-o-animation-duration',
        '-o-animation-timing-function',
        '-o-animation-delay',
        '-o-animation-iteration-count',
        '-o-animation-direction'
    ],
    background: [
        "background-color",
        "background-image",
        "background-repeat",
        "background-attachment",
        "background-position",
        "background-position-x",
        "background-position-y"
    ],
    border: [
        'border-width', 
        'border-style', 
        'border-color'
    ],
    outline: [
        'outline-width', 
        'outline-style', 
        'outline-color'
    ],
    margin: [
        'margin-top', 
        'margin-right', 
        'margin-bottom', 
        'margin-left'
    ],
    padding: [
        'padding-top', 
        'padding-right', 
        'padding-bottom', 
        'padding-left'
    ],
    background: [
        'background-color', 
        'background-image', 
        'background-repeat', 
        'background-attachment', 
        'background-position'
    ],
    font: [
        'font-style',
        'font-variant',
        'font-weight',
        'font-size', 
        'font-family',
        'line-height'
    ]
}

function canBeCombined(prop) {
    prop = prop.trim()
    for(var x in canBeCombinedProps) {
        if (prop == x || prop.indexOf(x) == 0 || canBeCombinedProps[x].indexOf(prop) != -1) {
            return x;
        }
    }
    return null;
}
exports.canBeCombined = canBeCombined;

function camelCase(name) {
    var splited = name.split('-')

    var collector = []
    splited.forEach(function(x) {
        collector.push(x.slice(0, 1).toUpperCase() + x.slice(1))
    })
    return collector.join('')
}

function len(arr) {
    return arr.length;
}

exports.len = len;
exports.containsHack = containsHack
exports.camelCase = camelCase

})
// auto generated by concat 
;define('ckstyle/plugins/helper', function(require, exports, module) {

var colors = require('./colors')

exports.heredoc = function(fn) {
    return fn.toString()
        .replace(/^[^\/]+\/\*!?/, "")
        .replace(/\*\/[^\/]+$/, "")
        .replace(/^[\s\xA0]+/, "")
        .replace(/[\s\xA0]+$/, "");
};

var simpleOverridesNames = 'width height color display margin padding'.split(' ');
exports.canOverride = function(name, value) {
    return value.indexOf('!important') == -1 && simpleOverridesNames.indexOf(name) != -1
}

exports.replaceFontWeights = function(value) {
    value = value.replace('bold', '700').replace('normal', '400')
    return value;
}

exports.replaceRGB = function(value) {
    if (value.indexOf('rgb') != -1) {
        // from clean-css: https://github.com/jakubpawlowicz/clean-css/blob/master/lib/colors/rgb-to-hex.js
        value = value.replace(/rgb\(\s*(\-?\d+)\s*,\s*(\-?\d+)\s*,\s*(\-?\d+)\)/g, function(match, red, green, blue) {
            red = Math.max(0, Math.min(~~red, 255));
            green = Math.max(0, Math.min(~~green, 255));
            blue = Math.max(0, Math.min(~~blue, 255));

            // Credit: Asen  http://jsbin.com/UPUmaGOc/2/edit?js,console
            var result = ('00000' + (red << 16 | green << 8 | blue).toString(16)).slice(-6);
            if (result[0] == result[1] && result[2] == result[3] && result[4] == result[5]) {
                result = result[0] + result[1] + result[2]
            }
            return '#' + result.toUpperCase()
        });
    }
    return value
}


exports.replaceColors = function(value) {
    

    for(var prop in colors) {
        var a = prop.length;
        var b = colors[prop].length;
        if (a == b) {
            continue;
        }
        var lower = value.toLowerCase()
        if (a > b) {
            var start = lower.indexOf(prop);
            if (start != -1) {
                // do not replace upper case color names.
                value = value.replace(new RegExp(prop, 'g'), colors[prop].toUpperCase());
            }
        } else {
            if (lower.indexOf(colors[prop]) != -1) {
                value = value.replace(new RegExp(colors[prop], 'gim'), prop)
            }
        }
    }
    return value;
}

exports.colors = colors;

function len(arr) {
    return arr.length;
}
exports.len = len;

function str(num) {
    return '' + num;
}
exports.str = str;

function startswith(str, pattern) {
    return str.indexOf(pattern) == 0;
}
exports.startswith = startswith;

function endswith(str, pattern) {
    if (str.length < pattern.length) {
        return false;
    }
    return str.slice(pattern.length * -1) == pattern;
}
exports.endswith = endswith;

function times(str, time) {
    var collector = '';
    for(var i = 0; i < time; i++) {
        collector += str;
    }
    return collector;
}
exports.times = times;

exports.isFontFamilyName = function(font) {
    font = font.toLowerCase()
    var added = "," + font + ","
    return fontFamilyNames.indexOf(font) != -1 || fontFamilyNames.indexOf(added) != -1
}


var pattern = /[@\*\[\]\(\):>]/

function len(arr) {
    return arr.length;
}

function hasHackChars(text) {
    return !!pattern.exec(text)
}
exports.hasHackChars = hasHackChars;

function containsHack(rule) {
    if (!rule.value) {
        text = rule;
        var flag = text.indexOf('\\0') != -1 || text.indexOf('\\9') != -1
        return flag;
    }
    var text = rule.value;
    if (text.indexOf('\\0') != -1 || text.indexOf('\\9') != -1) {
        return true;
    }
    if (getCss3PrefixValue(rule.strippedName) == 0 && rule.name != rule.strippedName) {
        return true;
    }
    return false
}

exports.containsHack = containsHack;

function getAttrOrder(attr, strippedName) {
    if (attr in cssAttrOrders)
        return cssAttrOrders[attr] + getCss3PrefixValue(strippedName)
    if (attr.indexOf('-') != -1) {
        var splited = attr.split('-')
        var tmp = splited[0] + '-' + splited[len(splited) - 1]
        if (tmp in cssAttrOrders)
            return cssAttrOrders[tmp] + getCss3PrefixValue(strippedName)
        while (len(splited) != 0) {
            splited = splited.slice(0, -1);
            tmp = splited.join('-')
            if (tmp in cssAttrOrders)
                return cssAttrOrders[tmp] + getCss3PrefixValue(strippedName)
        }
    }
    return 6000 + getCss3PrefixValue(strippedName)
}
exports.getAttrOrder = getAttrOrder

function getCss3PrefixValue(attr) {
    var value = 0
    if (attr.indexOf('-webkit') == 0)
        value = value - 5
    else if (attr.indexOf('-khtml') == 0)
        value = value - 4
    else if (attr.indexOf('-moz') == 0)
        value = value - 3
    else if (attr.indexOf('-ms') == 0)
        value = value - 2
    else if (attr.indexOf('-o') == 0)
        value = value - 1
    return value
}
exports.getCss3PrefixValue = getCss3PrefixValue;

function isHTMLTag(tag) {
    return containsInArray(validHTMLTags, tag)
}
exports.isHTMLTag = isHTMLTag;

function isCssProp(prop) {
    return containsInArray(validCSSAttrs, prop)
}
exports.isCssProp = isCssProp;

function isCss3Prop(prop) {
    return containsInArray(allCss3Props, prop)
}
exports.isCss3Prop = isCss3Prop;

function countStrLen(str) {
    var chns = str.match(/[\u4e00-\u9fa5]+/g)
    var total = 0;
    chns && chns.forEach(function(chn) {
        total += chn.length * 2
    })
    var engs = str.match(/[^\u4e00-\u9fa5]+/g)
    engs && engs.forEach(function(eng) {
        total += eng.length
    })
    return total
}
exports.countStrLen = countStrLen

function containsChnChar(string) {
    return /[\u4e00-\u9fa5]+/.test(string)
}
exports.containsChnChar = containsChnChar;

function isCss3PrefixProp(prop) {
    return containsInArray(prefixCss3Props, prop)
}
exports.isCss3PrefixProp = isCss3PrefixProp;

var wordsPattern = /\w+/g
function existsAppearanceWords(selector) {
    selector = selector.toLowerCase()
    words = selector.match(wordsPattern)
    for(var i = 0; i < words.length; i++) {
        var w = words[i];
        if (containsInArray(appearanceWords, w)) {
            return w;
        }
    }
    return null;
}
exports.existsAppearanceWords = existsAppearanceWords;

function isSimpleSelector(selector) {
    for(var i = 0; i < simpleSelectors.length; i++) {
        if (simpleSelectors[i] == selector) {
            return true;
        }
    }
    return false;
}
exports.isSimpleSelector = isSimpleSelector;

function containsInArray(array, value) {
    return array.indexOf(value) != -1
}

var maybeDoNotNeedPrefix = 'border-radius'.split(' ')

function doNotNeedPrefixNow(attr) {
    attr = attr.trim()
    if (startswith(attr, 'border') && endswith(attr, 'radius'))
        return true

    for (var i = maybeDoNotNeedPrefix.length - 1; i >= 0; i--) {
        if (maybeDoNotNeedPrefix[i].indexOf(attr) != -1) {
            return true;
        }
    }

    return false;
}
exports.doNotNeedPrefixNow = doNotNeedPrefixNow;

// from https://github.com/stubbornella/csslint/wiki/Require-compatible-vendor-prefixes
var prefixCss3Props = 'animation animation-delay animation-direction animation-duration animation-fill-mode animation-iteration-count animation-name animation-play-state animation-timing-function appearance border-end border-end-color border-end-style border-end-width border-image border-radius border-start border-start-color border-start-style border-start-width box-align box-direction box-flex box-lines box-ordinal-group box-orient box-pack box-sizing box-shadow column-count column-gap column-rule column-rule-color column-rule-style column-rule-width column-width hyphens line-break margin-end margin-start marquee-speed marquee-style padding-end padding-start tab-size text-size-adjust transform transform-origin transition transition-delay transition-duration transition-property transition-timing-function user-modify user-select background-size writing-mode'.split(' ')

// according to http://fed.renren.com/archives/1212
var cssAttrOrdersMap = {
    0 : ['display', 'position', 'left', 'top', 'bottom', 'right', 'float', 'list-style', 'clear'],
    200 : ['width', 'height', 'margin', 'padding', 'border'],
    400 : ['background'],
    600 : ['line-height'],
    800 : ['color', 'font', 'text-decoration', 'text-align', 'text-indent', 'vertical-align', 'white-space', 'content'],
    1000: ['cursor', 'z-index', 'zoom'],
    1200: prefixCss3Props
    // 1400 : ['other']
}

// convert 0:a, b to a:0, b:0
var cssAttrOrders = {}
for(var key in cssAttrOrdersMap) {
    var value = cssAttrOrdersMap[key];
    counter = 0;
    value.forEach(function(x) {
        cssAttrOrders[x] = parseInt(key) + counter
        counter = counter + 6
    })
}

var canContainUrlProps = 'background behavior cursor'.split(' ')
exports.canContainUrl = function canContainUrl(prop) {
    prop = prop.split('-')[0];
    return containsInArray(canContainUrlProps, prop)
}

// execute in http://www.w3schools.com/cssref/css_websafe_fonts.asp
//
// var tables = document.getElementsByClassName('reference');
// var values = [];
// for (var i = 0;  i < tables.length; i++) {
//     trs = tables[i].getElementsByTagName('tr')
//     for(var j = 0; j < trs.length; j++) {
//         td = trs[j].getElementsByTagName('td')[0];
//         if (td) {
//             var text = td.textContent.toLowerCase().trim()
//             var spliteds = text.split(',');
//             for (var k = 0; k < spliteds.length; k++) {
//                 values.push(spliteds[k].trim().replace('"', "'").replace('"', "'"))
//             }
//         }
//     }
// }
// values = values.slice(2);
// console.log(values.sort().join(','));

var fontFamilyNames = ("'arial black','book antiqua','comic sans ms','courier new','lucida console','lucida grande','lucida sans unicode','palatino linotype','times new roman','trebuchet ms',arial,charcoal,courier,cursive,gadget,geneva,geneva,helvetica,helvetica,impact,monaco,monospace,monospace,palatino,sans-serif,sans-serif,sans-serif,sans-serif,sans-serif,sans-serif,sans-serif,sans-serif,serif,serif,tahoma,times,verdana" + ",georgia").split(',')

// add slowly and progressively
var simpleSelectors = '.nav .sub #main #main2 #sidebar #sidebar2 .header .footer .publisher .box .login .site-nav .side'.split(' ')

//  execute in http://www.w3schools.com/cssref/css_colornames.asp
// 
// var tables = document.getElementsByClassName('reference');
// var values = [];
// for (var i = 0;  i < tables.length; i++) {
//     trs = tables[i].getElementsByTagName('tr')
//     for(var j = 0; j < trs.length; j++) {
//         td = trs[j].getElementsByTagName('td')[0];
//         if (td) {
//             var text = td.textContent.toLowerCase().trim()
//             if (text == 'h1') text = 'h1 h2 h3 h4 h5 h6';
//             values.push(text)
//         }
//     }
// }
// values = values.slice(2);
// console.log(values.join(' '));

var appearanceWords = ("left right top bottom float" + " aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgrey darkgreen darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite goldenrod gray grey green greenyellow honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgrey lightgreen lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen").split(' ')
// execute on http://www.w3schools.com/cssref/default.asp
//
// var tables = document.getElementsByClassName('reference');
// var values = [];
// for (var i = 0;  i < tables.length; i++) {
//     trs = tables[i].getElementsByTagName('tr')
//     for(var j = 0; j < trs.length; j++) {
//         td = trs[j].getElementsByTagName('td')[0];
//         if (td && trs[j].getElementsByTagName('td')[2].textContent == '3') {
//             var text = td.textContent
//             if (text == 'h1') text = 'h1 h2 h3 h4 h5 h6';
//             values.push(text)
//         }
//     }
// }
// values = values.slice(2);
// console.log(values.join(' '));
//
var allCss3Props = 'animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-play-state background-clip background-origin background-size border-bottom-left-radius border-bottom-right-radius border-image border-image-outset border-image-repeat border-image-slice border-image-source border-image-width border-radius border-top-left-radius border-top-right-radius box-decoration-break box-shadow overflow-x overflow-y overflow-style rotation rotation-point color-profile opacity rendering-intent bookmark-label bookmark-level bookmark-target float-offset hyphenate-after hyphenate-before hyphenate-character hyphenate-lines hyphenate-resource hyphens image-resolution marks string-set box-align box-direction box-flex box-flex-group box-lines box-ordinal-group box-orient box-pack @font-face font-size-adjust font-stretch crop move-to page-policy grid-columns grid-rows target target-name target-new target-position alignment-adjust alignment-baseline baseline-shift dominant-baseline drop-initial-after-adjust drop-initial-after-align drop-initial-before-adjust drop-initial-before-align drop-initial-size inline-box-align line-stacking line-stacking-ruby line-stacking-shift line-stacking-strategy text-height marquee-direction marquee-play-count marquee-speed marquee-style column-count column-fill column-gap column-rule column-rule-color column-rule-style column-rule-width column-span column-width columns fit fit-position image-orientation page size ruby-align ruby-overhang ruby-position ruby-span mark mark-after mark-before phonemes rest rest-after rest-before voice-balance voice-duration voice-pitch voice-pitch-range voice-rate voice-stress voice-volume hanging-punctuation punctuation-trim text-align-last text-justify text-outline text-overflow text-shadow text-wrap word-break word-wrap transform transform-origin transform-style perspective perspective-origin backface-visibility transition transition-property transition-duration transition-timing-function transition-delay appearance box-sizing icon nav-down nav-index nav-left nav-right nav-up outline-offset user-select resize animation animation-fill-mode border-end border-end-color border-end-style border-end-width border-start border-start-color border-start-style border-start-width line-break margin-end margin-start padding-end padding-start tab-size text-size-adjust user-modify writing-mode'.split(' ')

// execute on http://www.w3schools.com/tags/default.asp
//
// var tables = document.getElementsByClassName('reference');
// var values = [];
// for (var i = 0;  i < tables.length; i++) {
//     trs = tables[i].getElementsByTagName('tr')
//     for(var j = 0; j < trs.length; j++) {
//         td = trs[j].getElementsByTagName('td')[0];
//         if (td) {
//             var text = td.textContent.split('>')[0].split('<')[1]
//             if (text == 'h1') text = 'h1 h2 h3 h4 h5 h6';
//             values.push(text)
//         }
//     }
// }
// values = values.slice(2);
// console.log(values.join(' '));

var validHTMLTags = 'a abbr acronym address applet area article aside audio b base basefont bdi bdo big blockquote body br button canvas caption center cite code col colgroup command datalist dd del details dfn dir div dl dt em embed fieldset figcaption figure font footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins kbd keygen label legend li link map mark menu meta meter nav noframes noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr track tt u ul var video wbr'.split(' ')


//  execute on http://www.w3schools.com/cssref/default.asp
// var tables = document.getElementsByClassName('reference');
// var values = [];
// for (var i = 0;  i < tables.length; i++) {
//     trs = tables[i].getElementsByTagName('tr')
//     for(var j = 0; j < trs.length; j++) {
//         td = trs[j].getElementsByTagName('td')[0];
//         if (td) {
//             values.push(td.textContent)
//         }
//     }
// }
// console.log(values.join(' '));

var validCSSAttrs = ('@keyframes animation animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-play-state ' + 
    'background background-attachment background-color background-image background-position background-repeat background-clip background-origin background-size background-inline-policy border border-bottom border-bottom-color border-bottom-style border-bottom-width border-color border-left border-left-color border-left-style border-left-width border-right border-right-color border-right-style border-right-width border-style border-top border-top-color border-top-style border-top-width border-width outline outline-color outline-style outline-width ' + 
    'border-bottom-left-radius border-bottom-right-radius border-image border-image-outset border-image-repeat border-image-slice border-image-source border-image-width border-radius border-top-left-radius border-top-right-radius box-decoration-break box-shadow overflow-x overflow-y overflow-style rotation rotation-point color-profile opacity rendering-intent bookmark-label bookmark-level bookmark-target float-offset ' + 
    'hyphenate-after hyphenate-before hyphenate-character hyphenate-lines hyphenate-resource hyphens image-resolution marks string-set height max-height max-width min-height min-width width box-align box-direction box-flex box-flex-group box-lines box-ordinal-group box-orient box-pack font font-family font-size font-style font-variant font-weight @font-face font-size-adjust font-stretch content counter-increment counter-reset quotes ' + 
    'crop move-to page-policy grid-columns grid-rows target target-name target-new target-position alignment-adjust alignment-baseline baseline-shift dominant-baseline drop-initial-after-adjust drop-initial-after-align drop-initial-before-adjust drop-initial-before-align drop-initial-size drop-initial-value inline-box-align line-stacking line-stacking-ruby line-stacking-shift line-stacking-strategy text-height list-style list-style-image ' + 
    'list-style-position list-style-type margin margin-bottom margin-left margin-right margin-top marquee-direction marquee-play-count marquee-speed marquee-style column-count column-fill column-gap column-rule column-rule-color column-rule-style column-rule-width column-span column-width columns padding padding-bottom padding-left padding-right padding-top fit fit-position image-orientation page size bottom clear clip cursor display ' + 
    'float left overflow position right top visibility z-index orphans page-break-after page-break-before page-break-inside widows ruby-align ruby-overhang ruby-position ruby-span mark mark-after mark-before phonemes rest rest-after rest-before voice-balance voice-duration voice-pitch voice-pitch-range voice-rate ' + 
    'voice-stress voice-volume border-collapse border-spacing caption-side empty-cells table-layout color direction letter-spacing line-height text-align text-decoration text-indent text-transform unicode-bidi vertical-align white-space word-spacing hanging-punctuation punctuation-trim text-align-last text-justify ' + 
    'text-outline text-overflow text-shadow text-wrap word-break word-wrap transform transform-origin transform-style perspective perspective-origin backface-visibility transition transition-property transition-duration transition-timing-function transition-delay appearance box-sizing icon nav-down nav-index nav-left ' + 
    'nav-right nav-up outline-offset resize expression filter zoom behavior').split(' ')

})
// auto generated by concat 
;define('ckstyle/plugins/index', function(require, exports, module) {

exports.FED1CanNotSetFontFamily = require('./FED1CanNotSetFontFamily'); 
exports.FED1Css3PropPrefix = require('./FED1Css3PropPrefix'); 
exports.FED1Css3PropSpaces = require('./FED1Css3PropSpaces'); 
exports.FED1DistinguishBrowserRule = require('./FED1DistinguishBrowserRule'); 
exports.FED1FixCommentInValue = require('./FED1FixCommentInValue'); 
exports.FED1FixOutlineZero = require('./FED1FixOutlineZero'); 
exports.FED1FontSizeShouldBePtOrPx = require('./FED1FontSizeShouldBePtOrPx'); 
exports.FED1HackAttributeInCorrectWay = require('./FED1HackAttributeInCorrectWay'); 
exports.FED1HexColorShouldUpper = require('./FED1HexColorShouldUpper'); 
exports.FED1MultiLineSpaces = require('./FED1MultiLineSpaces'); 
exports.FED1NoAlphaImageLoader = require('./FED1NoAlphaImageLoader'); 
exports.FED1NoExpression = require('./FED1NoExpression'); 
exports.FED1NoUnitAfterZero = require('./FED1NoUnitAfterZero'); 
exports.FED1NoZeroBeforeDot = require('./FED1NoZeroBeforeDot'); 
exports.FED1ReplaceBorderZeroWithBorderNone = require('./FED1ReplaceBorderZeroWithBorderNone'); 
exports.FED1SafeUrlInValue = require('./FED1SafeUrlInValue'); 
exports.FED1SemicolonAfterValue = require('./FED1SemicolonAfterValue'); 
exports.FED1ShorterColors = require('./FED1ShorterColors'); 
exports.FED1ShorterFontWeight = require('./FED1ShorterFontWeight'); 
exports.FED1ShouldAddSpaceForCalc = require('./FED1ShouldAddSpaceForCalc'); 
exports.FED1ShouldNotUseImportant = require('./FED1ShouldNotUseImportant'); 
exports.FED1SingleLineSpaces = require('./FED1SingleLineSpaces'); 
exports.FED1TransChnFontFamilyNameIntoEng = require('./FED1TransChnFontFamilyNameIntoEng'); 
exports.FED1UnknownCssNameChecker = require('./FED1UnknownCssNameChecker'); 
exports.FED1UseLowerCaseProp = require('./FED1UseLowerCaseProp'); 
exports.FED1UseSingleQuotation = require('./FED1UseSingleQuotation'); 
exports.FED1UseValidValues = require('./FED1UseValidValues'); 
exports.FED1ZIndexShouldInRange = require('./FED1ZIndexShouldInRange'); 
exports.FED2CombineInToOne = require('./FED2CombineInToOne'); 
exports.FED2CommentLengthLessThan80 = require('./FED2CommentLengthLessThan80'); 
exports.FED2DistinguishBrowserRuleSet = require('./FED2DistinguishBrowserRuleSet'); 
exports.FED2DoNotSetStyleForSimpleSelector = require('./FED2DoNotSetStyleForSimpleSelector'); 
exports.FED2DoNotSetStyleForTagOnly = require('./FED2DoNotSetStyleForTagOnly'); 
exports.FED2HighPerformanceSelector = require('./FED2HighPerformanceSelector'); 
exports.FED2MultiLineBraces = require('./FED2MultiLineBraces'); 
exports.FED2MultiLineSelectors = require('./FED2MultiLineSelectors'); 
exports.FED2NoAppearanceNameInSelector = require('./FED2NoAppearanceNameInSelector'); 
exports.FED2NoCommentInValues = require('./FED2NoCommentInValues'); 
exports.FED2NoEmptyRuleSet = require('./FED2NoEmptyRuleSet'); 
exports.FED2NoSimpleNumberInSelector = require('./FED2NoSimpleNumberInSelector'); 
exports.FED2NoStarInSelector = require('./FED2NoStarInSelector'); 
exports.FED2RemoveDuplicatedAttr = require('./FED2RemoveDuplicatedAttr'); 
exports.FED2SelectorNoUnderLine = require('./FED2SelectorNoUnderLine'); 
exports.FED2SingleLineBraces = require('./FED2SingleLineBraces'); 
exports.FED2SingleLineSelector = require('./FED2SingleLineSelector'); 
exports.FED2StyleShouldInOrder = require('./FED2StyleShouldInOrder'); 
exports.FED2UnknownHTMLTagName = require('./FED2UnknownHTMLTagName'); 
exports.FED2UseLowerCaseSelector = require('./FED2UseLowerCaseSelector'); 
exports.FED3CombineSameRuleSets = require('./FED3CombineSameRuleSets'); 
exports.FED3CombineSameSelector = require('./FED3CombineSameSelector'); 
exports.FED3MustContainAuthorInfo = require('./FED3MustContainAuthorInfo'); 
exports.FED4DistinguishBrowserExtra = require('./FED4DistinguishBrowserExtra'); 
exports.FED4FixNestedStatement = require('./FED4FixNestedStatement'); 
exports.FED4HackRuleSetInCorrectWay = require('./FED4HackRuleSetInCorrectWay');

})
// auto generated by concat 
;define('ckstyle/reporter/HtmlReporter', function(require, exports, module) {

var fill = require('./helper').fill;
var Class = require('../base').Class;

function len(arr) {
    return arr.length;
}

var HttpReporter = new Class(function() {
    this.__init__ = function(self, checker) {
        self.checker = checker
        self.msgs = []
        self.logs = []
        self.errors = []
        self.warnings = []
    }

    this.doReport = function(self) {
        checker = self.checker
        counter = 0

        var result = checker.errors()
        logs = result[0]
        warns = result[1]
        errors = result[2]

        if (len(logs) == 0 && len(warns) == 0 && len(errors) == 0) {
            // self.appendMsg('msg', {
            //     code: 200,
            //     msg: 'aha, no problem'
            // })
            return
        }

        errors.forEach(function(error) {
            counter = counter + 1
            self.appendMsg('error', fill(error))
        })

        warns.forEach(function(warn) {
            counter = counter + 1
            self.appendMsg('warning', fill(warn))
        })

        logs.forEach(function(log) {
            counter = counter + 1
            self.appendMsg('log', fill(log))
        })
    }

    this.appendMsg = function(self, type, msg) {
        if (type == 'msg') {
            self.msgs.push(msg)
        }
        if (type == 'log') {
            self.logs.push(msg)
        }
        if (type == 'error') {
            self.errors.push(msg)
        }
        if (type == 'warning') {
            self.warnings.push(msg)
        }
    }

    this._toHTML = function(self, type, arr, html) {
        if (arr.length) {
            html.push('<div class="' + type.toLowerCase() + '">\n')
            html.push('  <h2>' + type + '</h2>\n');
            html.push('  <ol>\n')
            arr.forEach(function(msg) {
                html.push('    <li>' + msg + '</li>\n')
            })
            html.push('  </ol>\n')
            html.push('</div>\n')
        }
    }

    this.export = function(self) {
        var html = [];
        self._toHTML('MSG', self.msgs, html)
        self._toHTML('ERROR', self.errors, html)
        self._toHTML('WARN', self.warnings, html)
        self._toHTML('LOG', self.logs, html)
        return html.join('')
    }
});

module.exports = HttpReporter;

})
// auto generated by concat 
;define('ckstyle/reporter/JsonReporter', function(require, exports, module) {

var fill = require('./helper').fill;
var Class = require('../base').Class;

function len(arr) {
    return arr.length;
}

var TextReporter = new Class(function() {
    this.__init__ = function(self, checker) {
        self.checker = checker
        self.msgs = []
        self.logs = []
        self.errors = []
        self.warnings = []
    }

    this.doReport = function(self) {
        checker = self.checker
        counter = 0

        var result = checker.errors()
        logs = result[0]
        warns = result[1]
        errors = result[2]

        if (len(logs) == 0 && len(warns) == 0 && len(errors) == 0) {
            self.appendMsg('msg', {
                code: 200,
                msg: 'aha, no problem'
            })
            return
        }

        errors.forEach(function(error) {
            counter = counter + 1
            self.appendMsg('error', fill(error))
        })

        warns.forEach(function(warn) {
            counter = counter + 1
            self.appendMsg('warning', fill(warn))
        })

        logs.forEach(function(log) {
            counter = counter + 1
            self.appendMsg('log', fill(log))
        })
    }

    this.appendMsg = function(self, type, msg) {
        if (type == 'msg') {
            self.msgs.push(msg)
        }
        if (type == 'log') {
            self.logs.push(msg)
        }
        if (type == 'error') {
            self.errors.push(msg)
        }
        if (type == 'warning') {
            self.warnings.push(msg)
        }
    }

    this.export = function(self) {
        return JSON.stringify({
            msgs: self.msgs,
            warnings: self.warnings,
            logs: self.logs,
            errors: self.errors
        })
    }
});

module.exports = TextReporter;

})
// auto generated by concat 
;define('ckstyle/reporter/TextReporter', function(require, exports, module) {

var fill = require('./helper').fill;
var Class = require('../base').Class;

function len(arr) {
    return arr.length;
}

var TextReporter = new Class(function() {
    this.__init__ = function(self, checker) {
        self.checker = checker
        self.msgs = []
    }

    this.doReport = function(self) {
        checker = self.checker
        counter = 0

        var result = checker.errors()
        logs = result[0]
        warns = result[1]
        errors = result[2]

        if (len(logs) == 0 && len(warns) == 0 && len(errors) == 0) {
            // self.appendMsg('aha, no problem')
            return
        }

        errors.forEach(function(error) {
            counter = counter + 1
            self.appendMsg('[ERROR] ' + counter + '. ' + fill(error))
        })

        warns.forEach(function(warn) {
            counter = counter + 1
            self.appendMsg(' [WARN] ' + counter + '. ' + fill(warn))
        })

        logs.forEach(function(log) {
            counter = counter + 1
            self.appendMsg('  [LOG] ' + counter + '. ' + fill(log))
        })
    }

    this.appendMsg = function(self, msg) {
        self.msgs.push(msg)
    }

    this.export = function(self) {
        return self.msgs.join('\n')
    }
});

module.exports = TextReporter;

})
// auto generated by concat 
;define('ckstyle/reporter/helper', function(require, exports, module) {

function fill(obj) {
    function fillRuleSet(obj) {
        var errorMsg = obj["errorMsg"]
        if (errorMsg.indexOf('${selector}') == -1)
            errorMsg = errorMsg + ' (from "' + obj["selector"] + '")'
        else
            errorMsg = errorMsg.replace('${selector}', obj["selector"])
        return errorMsg
    }

    function fillStyleSheet(obj) {
        var errorMsg = obj["errorMsg"]
        if (errorMsg.indexOf('${file}') == -1)
            errorMsg = errorMsg + ' (from "' + obj["file"] + '")'
        else
            errorMsg = errorMsg.replace('${file}', obj["file"])
        return errorMsg
    }

    function fillRule(obj) {
        var errorMsg = obj["errorMsg"]
        if (errorMsg.indexOf('${selector}') == -1)
            errorMsg = errorMsg + ' (from "' + obj["selector"] + '")'
        else
            errorMsg = errorMsg.replace('${selector}', obj["selector"])
        errorMsg = errorMsg.replace('${name}', obj["name"])
        errorMsg = errorMsg.replace('${value}', obj["value"])
        return errorMsg
    }

    var level = obj["level"]
    if (level == 'rule')
        return fillRule(obj)
    else if (level == 'ruleset')
        return fillRuleSet(obj)
    else if (level == 'stylesheet')
        return fillStyleSheet(obj)
    return obj["errorMsg"]
}

exports.fill = fill;

})
// auto generated by concat 
;define('ckstyle/reporter/index', function(require, exports, module) {

var ReporterUtil = {}

var mapper = {
    text: './TextReporter',
    json: './JsonReporter',
    html: './HtmlReporter'
}

ReporterUtil.getReporter = function(reporterType, checker) {
    var Reporter = require(mapper[reporterType]);
    return new Reporter(checker);
}

exports.ReporterUtil = ReporterUtil

})
;;
// compatible for seajs
;;(function(global) {
    this.global = global;

    define('fs', function(require, exports) {})
    define('path', function(require, exports) {})
    define('colors', function(require, exports) {})

    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return String(this).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
        };
    }
    
    if (!Object.keys) {
        Object.keys = function (object) {
            var keys = [];
            for (var name in object) {
                if (Object.prototype.hasOwnProperty.call(object, name)) {
                    keys.push(name);
                }
            }
            return keys;
        };
    }


    if (!Array.isArray) {
        Array.isArray = function(obj) {
            return Object.prototype.toString.call(obj) === "[object Array]" ||
                   (obj instanceof Array);
        };
    }
    if (!Array.prototype.forEach) {
        Array.prototype.forEach =  function(block, thisObject) {
            var len = this.length >>> 0;
            for (var i = 0; i < len; i++) {
                if (i in this) {
                    block.call(thisObject, this[i], i, this);
                }
            }
        };
    }

    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (value /*, fromIndex */ ) {
            var length = this.length;
            var i = arguments[1] || 0;

            if (!length)     return -1;
            if (i >= length) return -1;
            if (i < 0)       i += length;

            for (; i < length; i++) {
                if (!Object.prototype.hasOwnProperty.call(this, i)) { continue }
                if (value === this[i]) return i;
            }
            return -1;
        };
    }

})(this);